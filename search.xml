<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python</title>
    <url>/2020/02/11/About%20python/</url>
    <content><![CDATA[<p>本文整理了我在使用和学习python的过程中借鉴的博客！<br><a id="more"></a><br><img src="/2020/02/11/About%20python/python.png" alt></p>
<h1 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h1><h2 id="About-Anaconda"><a href="#About-Anaconda" class="headerlink" title="About Anaconda"></a>About Anaconda</h2><ol>
<li>下载Anaconda<br>&emsp;&emsp;进入<a href="https://www.anaconda.com/distribution/#download-section" target="_blank" rel="noopener external nofollow noreferrer">Conda</a>官网,点击<code>64-Bit Graphical Installer (462 MB)</code>等待下载  </li>
<li>安装<br>&emsp;&emsp;点击已经下载好的安装包，<code>Destination Folder</code>选择自定义<code>Browse</code>文件夹（建议在D盘新建Conda文件夹）<br>剩余参考：<a href="https://jingyan.baidu.com/article/eae078275a31851fec5485b8.html" target="_blank" rel="noopener external nofollow noreferrer">https://jingyan.baidu.com/article/eae078275a31851fec5485b8.html</a></li>
<li><code>Finish</code>之后不需要其他操作，关闭即可。</li>
</ol>
<h2 id="About-Pycharm"><a href="#About-Pycharm" class="headerlink" title="About Pycharm"></a>About Pycharm</h2><ol>
<li>下载Pycharm<br>&emsp;&emsp;进入<a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2018.3.3.exe" target="_blank" rel="noopener external nofollow noreferrer">Pychram</a>官网，选择<code>Professional</code>等待下载</li>
<li>安装  </li>
</ol>
<ul>
<li>自定义安装路径，方便存放自己的代码<br>&emsp;&emsp;</li>
<li>勾选<code>64-bit launcher</code>、<code>.py</code>和<code>Add to ... the PATH</code>，点击<code>next</code></li>
<li>直接<code>install</code>，结束</li>
</ul>
<ol>
<li>剩余操作参考上面那个链接里面的（点击步骤4中的<code>Pychram</code>转到）（如果觉得麻烦，在下载的时候选择<code>Community</code></li>
<li>打开pychram<br>&emsp;&emsp;选择<code>open</code>，打开你之前已经创建好了的文件夹，我的是<code>D:/Conda/Code</code>，然后点击左上角<code>file</code>找到里面的<code>setting</code>，进去之后选择<code>project</code>下面的<code>project Interpreter</code>，看到：<img src="/2020/02/11/About%20python/2.png" alt><br>&emsp;&emsp;按如下操作：<img src="/2020/02/11/About%20python/3.png" alt><img src="/2020/02/11/About%20python/4.png" alt></li>
<li>结束</li>
</ol>
<h2 id="About-VScode"><a href="#About-VScode" class="headerlink" title="About VScode"></a>About VScode</h2><ul>
<li>人狠话不多，上菜！<img src="/2020/02/11/About%20python/vscode.png" alt></li>
</ul>
<h1 id="使用过程中的一些问题"><a href="#使用过程中的一些问题" class="headerlink" title="使用过程中的一些问题"></a>使用过程中的一些问题</h1><h2 id="问题1：安装相应的包很慢"><a href="#问题1：安装相应的包很慢" class="headerlink" title="问题1：安装相应的包很慢"></a>问题1：安装相应的包很慢</h2><h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>&emsp;&emsp;由于访问外网，python在加载包的时候很慢</p>
<h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>&emsp;&emsp;方法一：手动添加<code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</code><br>&emsp;&emsp;方法二：windows下，直接在<code>user</code>目录中创建一个<code>pip</code>文件，如：<code>C:\Users\xx\pip</code>，新建文件<code>pip.ini</code><br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p>
<h2 id="问题2：jupyter更换虚拟环境"><a href="#问题2：jupyter更换虚拟环境" class="headerlink" title="问题2：jupyter更换虚拟环境"></a>问题2：jupyter更换虚拟环境</h2><h3 id="问题描述：-1"><a href="#问题描述：-1" class="headerlink" title="问题描述："></a>问题描述：</h3><p>&emsp;&emsp;在创建的conda env上运行Jupyter notebook，但是发现在notebook中的python其实并没有运行在那个env上。</p>
<h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><ol>
<li>在<code>cmd</code>中切换到想要的环境xxx</li>
<li>输入命令<code>conda activate xxx</code></li>
<li>在xxx环境中安装好<code>ipykernel</code></li>
<li><code>python -m ipykernel install --name xxx</code>（一般第三步操作完就可以了）</li>
</ol>
<h2 id="问题3：Linux环境下使用Jupyter"><a href="#问题3：Linux环境下使用Jupyter" class="headerlink" title="问题3：Linux环境下使用Jupyter"></a>问题3：Linux环境下使用Jupyter</h2><h3 id="问题描述：-2"><a href="#问题描述：-2" class="headerlink" title="问题描述："></a>问题描述：</h3><p>&emsp;&emsp;linux远程使用jupyter notebook</p>
<h3 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook --allow-root --ip&#x3D;</span><br></pre></td></tr></table></figure>
<h2 id="问题4：Pychram专业版破解"><a href="#问题4：Pychram专业版破解" class="headerlink" title="问题4：Pychram专业版破解"></a>问题4：Pychram专业版破解</h2><h3 id="问题描述：-3"><a href="#问题描述：-3" class="headerlink" title="问题描述："></a>问题描述：</h3><p>&emsp;&emsp;专业版功能比较齐全，但是收费，破解感觉比较🐂🍺（社区版可以满足日常学习需求）</p>
<h3 id="解决方案：-3"><a href="#解决方案：-3" class="headerlink" title="解决方案："></a>解决方案：</h3><ul>
<li>暂时性激活：<a href="http://lookdiv.com/" target="_blank" rel="noopener external nofollow noreferrer">入口</a> ,钥匙：lookdiv.com</li>
<li>永久激活：<ol>
<li>下载Pychram2019:<a href="https://download.jetbrains.8686c.com/python/pycharm-professional-2018.3.3.exe" target="_blank" rel="noopener external nofollow noreferrer">https://download.jetbrains.8686c.com/python/pycharm-professional-2018.3.3.exe</a></li>
<li>下载破解补丁链接：<a href="https://pan.baidu.com/s/1pr5Ri3SxUtpCDaSAUIpQQg" target="_blank" rel="noopener external nofollow noreferrer">https://pan.baidu.com/s/1pr5Ri3SxUtpCDaSAUIpQQg</a></li>
<li>将破解补丁<code>JetbrainsCrack-release-enc.jar</code>放置在<code>pychram</code>安装目录<code>\bin</code>目录下面。</li>
<li>在<code>Pycharm</code>安装目录的\bin目录下找到<code>pycharm.exe.vmoptions</code>和<code>pycharm64.exe.vmoptions</code>两个文件 ，右键以文本格式打开（可用借助<code>Notepad</code>打开），在两个文件最后追加  <code>-javaagent:D:\RuanJian\PyCharm 2018.3.3\bin\JetbrainsCrack-release-enc.jar</code>，注意修改为你自己的安装路径，然后保存即可。</li>
<li>启动<code>pychram</code>,选择<code>Activation code</code>,输入以下内容。<figure class="highlight"><table><tr><td class="code"><pre><span class="line">   ThisCrackLicenseId-&#123;</span><br><span class="line">“licenseId”:”11011″,</span><br><span class="line">“licenseeName”:”WeChat”,</span><br><span class="line">“assigneeName”:”IT–Pig”,</span><br><span class="line">“assigneeEmail”:”1113449881@qq.com”,</span><br><span class="line">“licenseRestriction”:””,</span><br><span class="line">“checkConcurrentUse”:false,</span><br><span class="line">“products”:[</span><br><span class="line">&#123;“code”:”II”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”DM”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”AC”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”RS0″,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”WS”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”DPN”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”RC”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”PS”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”DC”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”RM”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”CL”,”paidUpTo”:”2099-12-31″&#125;,</span><br><span class="line">&#123;“code”:”PC”,”paidUpTo”:”2099-12-31″&#125;</span><br><span class="line">],</span><br><span class="line">“hash”:”2911276/0″,</span><br><span class="line">“gracePeriodDays”:7,</span><br><span class="line">“autoProlongated”:false&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>目标检测</title>
    <url>/2022/04/30/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<p>&emsp;&emsp;论文学习<br><a id="more"></a><br>

	<div class="row">
    <embed src="/pdf/目标检测学习笔记.pdf" width="100%" height="550" type="application/pdf">
	</div>


</p>
]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>目标检测</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建流程</title>
    <url>/2020/02/05/%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>以下是我总结的关于GitHub+Hexo搭建博客的流程以及一些主题细节变化的操作，以后若需要重新搭建，特此留眼。（精华帖）<br><a id="more"></a><br><img src="/2020/02/05/%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/title.jpg" alt></p>
<h2 id="简介：GitHub-Pages-＆-Hexo"><a href="#简介：GitHub-Pages-＆-Hexo" class="headerlink" title="简介：GitHub Pages ＆ Hexo"></a>简介：GitHub Pages ＆ Hexo</h2><h3 id="GitHub-Pages是什么？"><a href="#GitHub-Pages是什么？" class="headerlink" title="GitHub Pages是什么？"></a>GitHub Pages是什么？</h3><p>GitHub Pages是由GitHub官方提供的一种免费的静态站点托管服务，让我们可以在GitHub仓库里托管和发布自己的静态网站页面。</p>
<script type="math/tex; mode=display">\begin{equation}\label{eq1}
e=mc^2
\end{equation}</script><h3 id="Hexo是什么？"><a href="#Hexo是什么？" class="headerlink" title="Hexo是什么？"></a>Hexo是什么？</h3><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="Hexo博客新建文章"><a href="#Hexo博客新建文章" class="headerlink" title="Hexo博客新建文章"></a>Hexo博客新建文章</h3><p>详见：<a href="https://hexo.io/zh-cn/docs/commands#new" target="_blank" rel="noopener external nofollow noreferrer">指令/Hexo</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new 我的第一篇博客</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My First Blog"</span></span><br></pre></td></tr></table></figure>
<p><strong>注</strong>：如果标题中包含空格，请使用引号括起来</p>
<h3 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate / hexo g</span><br></pre></td></tr></table></figure>
<h3 id="启动预览"><a href="#启动预览" class="headerlink" title="启动预览"></a>启动预览</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo sever / $ hexo s</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://localhost:4000" target="_blank" rel="noopener external nofollow noreferrer">http://localhost:4000</a>出现Hexo默认页面，本地博客安装成功！</p>
<h3 id="部署预先生成的静态文件"><a href="#部署预先生成的静态文件" class="headerlink" title="部署预先生成的静态文件"></a>部署预先生成的静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy / hexo d</span><br></pre></td></tr></table></figure>
<p>即：进入网址<yourname.github.io>看到同样的效果</yourname.github.io></p>
<p><strong>注</strong>：进入网站可能会发现静态网站还未更新，等一会就好了，不需要重复操作！</p>
<h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><ul>
<li>hexo clean </li>
<li>删除文章</li>
<li>hexo g</li>
</ul>
<h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><h3 id="添加外部链接"><a href="#添加外部链接" class="headerlink" title="添加外部链接"></a>添加外部链接</h3><p>参考：</p>
<ol>
<li><a href="https://blog.csdn.net/qq_43020645/article/details/82845708" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/qq_43020645/article/details/82845708</a></li>
</ol>
<h3 id="添加访问人数"><a href="#添加访问人数" class="headerlink" title="添加访问人数"></a>添加访问人数</h3><p>参考：</p>
<ol>
<li><a href="https://chrischen0405.github.io/2018/09/11/post20180911/" target="_blank" rel="noopener external nofollow noreferrer">https://chrischen0405.github.io/2018/09/11/post20180911/</a></li>
</ol>
<h3 id="添加网易云外播放链"><a href="#添加网易云外播放链" class="headerlink" title="添加网易云外播放链"></a>添加网易云外播放链</h3><p>打开<code>D:\Blog\blog\themes\next\layout\_macro\sidebar.swig</code>，添加如下内容：<img src="/2020/02/05/%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/music1.png" alt>&emsp;&emsp;在<code>D:\Blog\blog\themes\next\_config.yml</code>末尾添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 网易云音乐插件</span><br><span class="line">background_music: &#x2F;&#x2F;music.163.com&#x2F;outchain&#x2F;player?type&#x3D;2&amp;id&#x3D;1380546324&amp;auto&#x3D;1&amp;height&#x3D;66</span><br></pre></td></tr></table></figure><br>设置特定的音乐，打开网页网易云  <img src="/2020/02/05/%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/music2.png" alt><br>点击生成外链播放器，替换箭头部分，即<code>src=</code>之后的内容。<br><img src="/2020/02/05/%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/music3.png" alt><br><code>auto=1</code>表示自动播放；<code>auto=0</code>表示取消自动播放。</p>
<h3 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h3><h3 id="添加加载进度条"><a href="#添加加载进度条" class="headerlink" title="添加加载进度条"></a>添加加载进度条</h3><p>下载安装<code>progress module</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure><br>在<code>/themes/next/_config.yml</code>中，设置如下：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">pace: true #是否开启进度条</span><br><span class="line">pace_theme: pace-theme-center-atom #选择进度条样式</span><br></pre></td></tr></table></figure></p>
<h3 id="添加当前浏览进度"><a href="#添加当前浏览进度" class="headerlink" title="添加当前浏览进度"></a>添加当前浏览进度</h3><p>修改<code>themes/next/_config.yml</code>，把 <code>false</code> 改为 <code>true</code>：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Scroll percent label in b2t button.</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><br>如果想放在侧边栏，搜索关键词<code>b2t</code>，把<code>false</code> 改为 <code>true</code>：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># Back to top in sidebar (only for Pisces | Gemini).</span><br><span class="line">b2t: false</span><br><span class="line"></span><br><span class="line"># Scroll percent label in b2t button.</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure></p>
<h3 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h3><p>参考：</p>
<ol>
<li><a href="https://blog.csdn.net/blue_zy/article/details/79071414" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/blue_zy/article/details/79071414</a></li>
</ol>
<h4 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h4><p>avatar 参数:  </p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">参数值</th>
<th style="text-align:center">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">空字符串’ ‘</td>
<td style="text-align:center">Gravatar官方图形</td>
</tr>
<tr>
<td style="text-align:center">mp</td>
<td style="text-align:center">神秘人（一个灰色头像）</td>
</tr>
<tr>
<td style="text-align:center">identicon</td>
<td style="text-align:center">抽象几何图形</td>
</tr>
<tr>
<td style="text-align:center">monsterid</td>
<td style="text-align:center">小怪物</td>
</tr>
<tr>
<td style="text-align:center">wavatar</td>
<td style="text-align:center">不同面孔和背景组合生成的头像</td>
</tr>
<tr>
<td style="text-align:center">retro</td>
<td style="text-align:center">八位像素复古头像</td>
</tr>
<tr>
<td style="text-align:center">robohash</td>
<td style="text-align:center">一种具有不同颜色、面部等的机器人</td>
</tr>
<tr>
<td style="text-align:center">hide</td>
<td style="text-align:center">不显示头像</td>
</tr>
</tbody>
</table>
</div>
<h4 id="邮箱设置"><a href="#邮箱设置" class="headerlink" title="邮箱设置"></a>邮箱设置</h4><p>参考：</p>
<ol>
<li><a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/zhaojun1998/Valine-Admin</a></li>
<li><a href="https://www.leeyiding.com/archives/27/" target="_blank" rel="noopener external nofollow noreferrer">https://www.leeyiding.com/archives/27/</a></li>
</ol>
<h4 id="Hexo中使用Latex"><a href="#Hexo中使用Latex" class="headerlink" title="Hexo中使用Latex"></a>Hexo中使用Latex</h4><p>参考：</p>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/387949353" target="_blank" rel="noopener external nofollow noreferrer">https://zhuanlan.zhihu.com/p/387949353</a></li>
</ol>
<h2 id="本地代码上传到GitHub"><a href="#本地代码上传到GitHub" class="headerlink" title="本地代码上传到GitHub"></a>本地代码上传到GitHub</h2><p>参考：</p>
<ol>
<li><a href="https://blog.csdn.net/qq_32846595/article/details/71149312" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/qq_32846595/article/details/71149312</a></li>
</ol>
<h3 id="预备备"><a href="#预备备" class="headerlink" title="预备备"></a>预备备</h3><ol>
<li>注册一个<a href="https://github.com/" target="_blank" rel="noopener external nofollow noreferrer">GitHub</a>账号</li>
<li>安装<a href="https://git-for-windows.github.io/" target="_blank" rel="noopener external nofollow noreferrer">git</a>工具</li>
</ol>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><ol>
<li>进入Github首页，点击<code>New repository</code>新建一个项目  </li>
<li>New  </li>
<li>填写仓库名称/勾选<code>Initialize this repository with a README</code></li>
</ol>
<h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>假设现在文件夹有一个文件<code>test.txt</code>需要上传<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add test.txt / git add .</span><br><span class="line">$ git commit -m <span class="string">"说明"</span></span><br><span class="line">$ git push <span class="comment">#推送到默认分支</span></span><br></pre></td></tr></table></figure></p>
<h2 id="问题集合"><a href="#问题集合" class="headerlink" title="问题集合"></a>问题集合</h2><h3 id="Github打不开的办法"><a href="#Github打不开的办法" class="headerlink" title="Github打不开的办法"></a>Github打不开的办法</h3><p>参考：</p>
<ol>
<li><a href="https://www.cnblogs.com/iupoint/p/14552968.html" target="_blank" rel="noopener external nofollow noreferrer">https://www.cnblogs.com/iupoint/p/14552968.html</a></li>
</ol>
<h3 id="git报错ssh-connect-to-host-github-com-port-22-Connection-timed-out，"><a href="#git报错ssh-connect-to-host-github-com-port-22-Connection-timed-out，" class="headerlink" title="git报错ssh: connect to host github.com port 22: Connection timed out，"></a>git报错ssh: connect to host github.com port 22: Connection timed out，</h3><p>参考：</p>
<ol>
<li><a href="https://blog.csdn.net/nightwishh/article/details/99647545" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/nightwishh/article/details/99647545</a></li>
<li><a href="https://blog.csdn.net/qq_36408085/article/details/104117293" target="_blank" rel="noopener external nofollow noreferrer">https://blog.csdn.net/qq_36408085/article/details/104117293</a></li>
</ol>
<h3 id="Error-listen-EADDRINUSE-address-already-in-use-4000"><a href="#Error-listen-EADDRINUSE-address-already-in-use-4000" class="headerlink" title="Error: listen EADDRINUSE: address already in use :::4000"></a>Error: listen EADDRINUSE: address already in use :::4000</h3><ul>
<li>查：netstat -ano | findstr “4000”</li>
<li>杀：taskkill -PID 8976 -F</li>
</ul>
<h3 id="Hexo，Next主题的‘下一页’、‘上一页’按钮错误显示为"><a href="#Hexo，Next主题的‘下一页’、‘上一页’按钮错误显示为" class="headerlink" title="Hexo，Next主题的‘下一页’、‘上一页’按钮错误显示为 "></a>Hexo，Next主题的‘下一页’、‘上一页’按钮错误显示为 <i class="fa fa-angle-right"></i></h3><p>打开<code>themes &gt; next &gt; layout &gt; _partials &gt; pagination.swig</code>：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: '上一页',</span><br><span class="line">        next_text: '下一页',</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="git-ssh-github-com-Permission-denied-publickey-spawn-failed"><a href="#git-ssh-github-com-Permission-denied-publickey-spawn-failed" class="headerlink" title="git@ssh.github.com: Permission denied (publickey). spawn failed"></a>git@ssh.github.com: Permission denied (publickey). spawn failed</h3><p><strong>措施1</strong>：</p>
<ul>
<li>删除<code>.deploy_git</code>文件夹</li>
<li>输入<code>git config --global core.autocrlf false</code></li>
<li>hexo clean</li>
<li>hexo generate</li>
<li>hexo deploy</li>
</ul>
<p><strong>措施2</strong>：</p>
<p>chmod -R 777</p>
<p>显示新的错误信息：<code>Could not read from remote repository</code></p>
<ul>
<li>删除<code>.ssh</code>中的<code>id_rsa</code>和<code>id_rsa.pub</code></li>
<li>ssh-keygen -t rsa -C “<a href="https://github.com/Ruirui-Huang/Ruirui-Huang.github.io" target="_blank" rel="noopener external nofollow noreferrer">https://github.com/Ruirui-Huang/Ruirui-Huang.github.io</a>“</li>
<li>在GitHub中<code>Setting &gt; SSH and GPG keys</code>中双击<code>New SSK key</code>，填入<code>id_rsa.pub</code>中的内容即可</li>
<li>hexo deploy</li>
</ul>
<h3 id="Code-504-The-app-is-archived-please-restore-in-console-before-use"><a href="#Code-504-The-app-is-archived-please-restore-in-console-before-use" class="headerlink" title="Code 504: The app is archived, please restore in console before use."></a>Code 504: The app is archived, please restore in console before use.</h3><p>SMTP_PASS: amzmugqwojuedjjd</p>
<p>超过30天没有访问导致<code>LeanCloud</code>存储服务器已归档，<code>激活</code>即可。</p>
<p>未完待续！！!</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>语义分割</title>
    <url>/2022/03/21/%E8%AF%AD%E4%B9%89%E5%88%86%E5%89%B2/</url>
    <content><![CDATA[<p>&emsp;&emsp;论文学习<br><a id="more"></a><br>

	<div class="row">
    <embed src="/pdf/语义分割学习笔记.pdf" width="100%" height="550" type="application/pdf">
	</div>


</p>
]]></content>
      <categories>
        <category>CV</category>
      </categories>
      <tags>
        <tag>语义分割</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenMMLab</title>
    <url>/2022/05/07/OpenMMLab/</url>
    <content><![CDATA[<p>&emsp;&emsp;训练框架学习<br><a id="more"></a><br>

	<div class="row">
    <embed src="/pdf/OpenMMLab学习笔记.pdf" width="100%" height="550" type="application/pdf">
	</div>


</p>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>深度学习</tag>
        <tag>训练框架</tag>
      </tags>
  </entry>
  <entry>
    <title>杂记</title>
    <url>/2023/09/10/%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<p>&emsp;&emsp;零散的记录<br><a id="more"></a><br>

	<div class="row">
    <embed src="/pdf/杂记.pdf" width="100%" height="550" type="application/pdf">
	</div>


</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Python多线程与多进程</title>
    <url>/2023/10/16/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<p>&emsp;&emsp;<br><a id="more"></a></p>
<h2 id="Python多线程"><a href="#Python多线程" class="headerlink" title="Python多线程"></a>Python多线程</h2><p>主要概念：</p>
<ul>
<li><p>join()：在子线程完成运行之前，这个子线程的父线程将一直被阻塞</p>
</li>
<li><p>setDaemon(True)：将线程声明为守护线程，必须在start()方法调用之前设置，如果不设置为守护线程程序会被无限挂起。这个方法基本和join是相反的。当我们在程序运行中，执行一个主线程，如果主线程又创建一个子线程，主线程和子线程 就分兵两路，分别运行，那么当主线程完成想退出时，会检验子线程是否完成。如 果子线程未完成，则主线程会等待子线程完成后再退出。但是有时候我们需要的是 只要主线程完成了，不管子线程是否完成，都要和主线程一起退出，这时就可以 用setDaemon方法啦</p>
</li>
<li>run():  线程被cpu调度后自动执行线程对象的run方法</li>
<li>start():启动线程活动</li>
<li>isAlive(): 返回线程是否活动的</li>
<li>getName(): 返回线程名</li>
<li>setName(): 设置线程名</li>
<li>threading.currentThread()：返回当前的线程变量</li>
<li>threading.enumerate()：返回一个包含正在运行的线程的list。正在运行指线程启动后、结束前，不包括启动前和终止后的线程</li>
<li>threading.activeCount()：返回正在运行的线程数量，与len(threading.enumerate())有相同的结果</li>
</ul>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(name)</span>:</span></span><br><span class="line">        print(<span class="string">'你好%s at %s'</span> %(name,time.ctime()))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"结束%s at %s"</span> %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'你好%s at %s'</span> % (name,time.ctime()))</span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">"结束%s at %s"</span> % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">	<span class="comment"># 创建线程对象</span></span><br><span class="line">    t1 = threading.Thread(target=say,args=(<span class="string">'tony'</span>,))  <span class="comment">#Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span></span><br><span class="line">    <span class="comment"># 启动线程</span></span><br><span class="line">	t1.start() </span><br><span class="line">    t2 = threading.Thread(target=listen, args=(<span class="string">'simon'</span>,)) <span class="comment">#这里就是创建了一个线程对象t2</span></span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"程序结束====================="</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">你好tony at Thu Apr <span class="number">25</span> <span class="number">16</span>:<span class="number">46</span>:<span class="number">22</span> <span class="number">2019</span>  --t1线程执行</span><br><span class="line">你好simon at Thu Apr <span class="number">25</span> <span class="number">16</span>:<span class="number">46</span>:<span class="number">22</span> <span class="number">2019</span> --t2线程执行</span><br><span class="line">程序结束=====================         --主线程执行</span><br><span class="line">结束tony at Thu Apr <span class="number">25</span> <span class="number">16</span>:<span class="number">46</span>:<span class="number">24</span> <span class="number">2019</span>  --sleep之后，t1线程执行</span><br><span class="line">结束simon at Thu Apr <span class="number">25</span> <span class="number">16</span>:<span class="number">46</span>:<span class="number">26</span> <span class="number">2019</span> --sleep之后，t2线程执行</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span>     --主线程结束</span><br></pre></td></tr></table></figure>
<p>可以看到主线程的print并不是等t1,t2线程都执行完毕之后才打印的，这是因为主线程和t1,t2 线程是同时跑的。但是主进程要等非守护子线程结束之后，主线程才会退出。</p>
<p>一般开发中，我们需要主线程的print打印是在最后面的，表明所有流程都结束了，也就是主线程结束了。这里就引入了一个join的概念。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(name)</span>:</span></span><br><span class="line">        print(<span class="string">'你好%s at %s'</span> %(name,time.ctime()))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"结束%s at %s"</span> %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'你好%s at %s'</span> % (name,time.ctime()))</span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">"结束%s at %s"</span> % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(<span class="string">'tony'</span>,))  <span class="comment">#Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span></span><br><span class="line">    t1.start() <span class="comment">#线程执行</span></span><br><span class="line">    t2 = threading.Thread(target=listen, args=(<span class="string">'simon'</span>,)) <span class="comment">#这里就是创建了一个线程对象t2</span></span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    t1.join() <span class="comment">#join等t1子线程结束，主线程打印并且结束</span></span><br><span class="line">    t2.join() <span class="comment">#join等t2子线程结束，主线程打印并且结束</span></span><br><span class="line">    print(<span class="string">"程序结束====================="</span>)</span><br><span class="line">	</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">你好tony at Thu Apr <span class="number">25</span> <span class="number">16</span>:<span class="number">57</span>:<span class="number">32</span> <span class="number">2019</span></span><br><span class="line">你好simon at Thu Apr <span class="number">25</span> <span class="number">16</span>:<span class="number">57</span>:<span class="number">32</span> <span class="number">2019</span></span><br><span class="line">结束tony at Thu Apr <span class="number">25</span> <span class="number">16</span>:<span class="number">57</span>:<span class="number">34</span> <span class="number">2019</span></span><br><span class="line">结束simon at Thu Apr <span class="number">25</span> <span class="number">16</span>:<span class="number">57</span>:<span class="number">36</span> <span class="number">2019</span></span><br><span class="line">程序结束=====================</span><br></pre></td></tr></table></figure>
<p><em>注意：</em>主线程执行了打印操作和主线程结束不是一个概念，如果子线程不加join，则主线程也会执行打印，但是主线程不会结束，还是需要待非守护子线程结束之后，主线程才结束。</p>
<p><strong>什么是非守护子线程？</strong></p>
<p>默认的子线程都是主线程的非守护子线程，但是有时候我们有需求，当主进程结束，不管子线程有没有结束，子线程都要跟随主线程一起退出，这时候我们引入一个“<em>守护线程</em>”的概念。</p>
<p>如果某个子线程设置为守护线程，主线程其实就不用管这个子线程了，当所有其他非守护线程结束，主线程就会退出，而守护线程将和主线程一起退出，守护主线程</p>
<ul>
<li><ol>
<li>设置t1线程为守护线程</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(name)</span>:</span></span><br><span class="line">        print(<span class="string">'你好%s at %s'</span> %(name,time.ctime()))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"结束%s at %s"</span> %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'你好%s at %s'</span> % (name,time.ctime()))</span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">"结束%s at %s"</span> % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(<span class="string">'tony'</span>,))  <span class="comment">#Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span></span><br><span class="line">    t1.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    t1.start() <span class="comment">#线程执行</span></span><br><span class="line">    t2 = threading.Thread(target=listen, args=(<span class="string">'simon'</span>,)) <span class="comment">#这里就是创建了一个线程对象t2</span></span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"程序结束====================="</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">你好tony at Thu Apr <span class="number">25</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">41</span> <span class="number">2019</span></span><br><span class="line">你好simon at Thu Apr <span class="number">25</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">41</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">程序结束=====================</span><br><span class="line"></span><br><span class="line">结束tony at Thu Apr <span class="number">25</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">43</span> <span class="number">2019</span>  -- 也会打印，因为主线程在等待t2线程结束的</span><br><span class="line">结束simon at Thu Apr <span class="number">25</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">45</span> <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<ul>
<li><ol>
<li>设置t2为守护线程</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">say</span><span class="params">(name)</span>:</span></span><br><span class="line">        print(<span class="string">'你好%s at %s'</span> %(name,time.ctime()))</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        print(<span class="string">"结束%s at %s"</span> %(name,time.ctime()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listen</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'你好%s at %s'</span> % (name,time.ctime()))</span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    print(<span class="string">"结束%s at %s"</span> % (name,time.ctime()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    t1 = threading.Thread(target=say,args=(<span class="string">'tony'</span>,))  <span class="comment">#Thread是一个类，实例化产生t1对象，这里就是创建了一个线程对象t1</span></span><br><span class="line">    t1.start() <span class="comment">#线程执行</span></span><br><span class="line">    t2 = threading.Thread(target=listen, args=(<span class="string">'simon'</span>,)) <span class="comment">#这里就是创建了一个线程对象t2</span></span><br><span class="line">    t2.setDaemon(<span class="literal">True</span>)</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"程序结束====================="</span>)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">你好tony at Thu Apr <span class="number">25</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">36</span> <span class="number">2019</span></span><br><span class="line">你好simon at Thu Apr <span class="number">25</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">36</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">程序结束=====================</span><br><span class="line"></span><br><span class="line">结束tony at Thu Apr <span class="number">25</span> <span class="number">17</span>:<span class="number">15</span>:<span class="number">38</span> <span class="number">2019</span></span><br><span class="line">结束simon at Thu Apr <span class="number">25</span> <span class="number">14</span>:<span class="number">11</span>:<span class="number">58</span> <span class="number">2019</span> -- 不会打印，因为主线程在等待t1线程结束的</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面的例子中我们注意到两个任务如果顺序执行要6s结束，如果是多线程执行4S结束，性能是有所提升的，但是我们要知道这里的性能提升实际上是由于cpu并发实现性能提升，也就是cpu线程切换（多道技术）带来的，而并不是真正的多cpu并行执行。</p>
<p><strong>并行和并发有什么区别？</strong><br>并行是并发的一种情况</p>
<ul>
<li>并发：是指一个系统具有处理多个任务的能力（cpu切换，多道技术）</li>
<li>并行：是指一个系统具有同时处理多个任务的能力（cpu同时处理多个任务）</li>
</ul>
<h2 id="Python多线程同步锁，死锁和递归锁"><a href="#Python多线程同步锁，死锁和递归锁" class="headerlink" title="Python多线程同步锁，死锁和递归锁"></a>Python多线程同步锁，死锁和递归锁</h2><p>前面说的两个功能是相互独立的，相互不干涉的，不会用到同享的资源或者数据，如果我们多个线程要用到相同的数据，那么就会存在资源争用和锁的问题，不管在什么语言中，这个都是不能避免的。</p>
<h3 id="Python同步锁"><a href="#Python同步锁" class="headerlink" title="Python同步锁"></a>Python同步锁</h3><p>Python同步锁通常被用来实现对共享资源的同步访问。为每一个共享资源创建一个Lock对象，当你需要访问该资源时，调用acquire方法来获取锁对象（如果其它线程已经获得了该锁，则当前线程需等待其被释放），待资源访问完后，再调用release方法释放锁。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_sub</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="comment"># num -= 1</span></span><br><span class="line">    num2 = num</span><br><span class="line">    time.sleep(<span class="number">0.001</span>)</span><br><span class="line">    num = num2<span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'开始测试同步锁 at %s'</span> % time.ctime())</span><br><span class="line"></span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = threading.Thread(target=fun_sub)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(<span class="string">'num is %d'</span> % num)</span><br><span class="line">    print(<span class="string">'结束测试同步锁 at %s'</span> % time.ctime())</span><br><span class="line">	</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">开始测试同步锁 at Sun Apr <span class="number">28</span> <span class="number">09</span>:<span class="number">56</span>:<span class="number">45</span> <span class="number">2019</span></span><br><span class="line">num <span class="keyword">is</span> <span class="number">91</span></span><br><span class="line">结束测试同步锁 at Sun Apr <span class="number">28</span> <span class="number">09</span>:<span class="number">56</span>:<span class="number">45</span> <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<ul>
<li>1.只有一个线程（假设线程1）拿到了num这个资源，然后把变量赋值给num2, sleep 0.001秒，这时候 num = 100</li>
<li>2.当第一个线程sleep 0.001秒这个期间，这个线程会做yield操作，就是把cpu切换给别的线程执行（假设线程2获得cpu使用权），线程2也和线程1一样也拿到num，返回赋值给num2，然sleep，这时候，其实num还是100.</li>
<li>3.线程2 sleep时候，又要yield操作，假设线程3拿到num，执行上面的操作，其实num有可能还是100</li>
<li>4.等到后面cpu重新切换给线程1，线程2，线程3上执行的时候，他们执行减1操作后，其实等到的num其实都是99，而不是顺序递减的。</li>
<li>5.其他剩余的线程操作如上</li>
</ul>
<p>下面借助于python的同步锁，同一时间只能放一个线程来操作num变量，减1之后，后面的线程操作来操作num变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun_sub</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    lock.acquire()</span><br><span class="line">    print(<span class="string">'----加锁----'</span>)</span><br><span class="line">    print(<span class="string">'现在操作共享资源的线程名字是:'</span>,t.name)</span><br><span class="line">    num2 = num</span><br><span class="line">    time.sleep(<span class="number">0.001</span>)</span><br><span class="line">    num = num2<span class="number">-1</span></span><br><span class="line">    lock.release()</span><br><span class="line">    print(<span class="string">'----释放锁----'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">'开始测试同步锁 at %s'</span> % time.ctime())</span><br><span class="line"></span><br><span class="line">    lock = threading.Lock() <span class="comment">#创建一把同步锁</span></span><br><span class="line"></span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        t = threading.Thread(target=fun_sub)</span><br><span class="line">        t.start()</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.join()</span><br><span class="line">    print(<span class="string">'num is %d'</span> % num)</span><br><span class="line">    print(<span class="string">'结束测试同步锁 at %s'</span> % time.ctime())</span><br><span class="line">	</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">.......</span><br><span class="line">----加锁----</span><br><span class="line">现在操作共享资源的线程名字是: Thread<span class="number">-98</span></span><br><span class="line">----释放锁----</span><br><span class="line">----加锁----</span><br><span class="line">现在操作共享资源的线程名字是: Thread<span class="number">-100</span></span><br><span class="line">----释放锁----</span><br><span class="line">num <span class="keyword">is</span> <span class="number">0</span></span><br><span class="line">结束测试同步锁 at Sun Apr <span class="number">28</span> <span class="number">12</span>:<span class="number">08</span>:<span class="number">27</span> <span class="number">2019</span></span><br></pre></td></tr></table></figure>
<h3 id="Python死锁"><a href="#Python死锁" class="headerlink" title="Python死锁"></a>Python死锁</h3><p>python中在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁，因为系统判断这部分资源都正在使用，所有这两个线程在无外力作用下将一直等待下去。</p>
<p>比如：A拿了一个苹果；B拿了一个香蕉；A现在想再拿个香蕉，就在等待B释放这个香蕉；B同时想要再拿个苹果，这时候就等待A释放苹果；这样就是陷入了僵局，这就是生活中的死锁</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">lock_apple = threading.Lock()</span><br><span class="line">lock_banana = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fun1()</span><br><span class="line">        self.fun2()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        lock_apple.acquire()  <span class="comment"># 如果锁被占用,则阻塞在这里,等待锁的释放</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"线程 %s , 想拿: %s--%s"</span> %(self.name, <span class="string">"苹果"</span>,time.ctime()))</span><br><span class="line"></span><br><span class="line">        lock_banana.acquire()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"线程 %s , 想拿: %s--%s"</span> %(self.name, <span class="string">"香蕉"</span>,time.ctime()))</span><br><span class="line">        lock_banana.release()</span><br><span class="line">        lock_apple.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        lock_banana.acquire()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"线程 %s , 想拿: %s--%s"</span> %(self.name, <span class="string">"香蕉"</span>,time.ctime()))</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">        lock_apple.acquire()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"线程 %s , 想拿: %s--%s"</span> %(self.name, <span class="string">"苹果"</span>,time.ctime()))</span><br><span class="line">        lock_apple.release()</span><br><span class="line"></span><br><span class="line">        lock_banana.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):  <span class="comment">#建立10个线程</span></span><br><span class="line">        my_thread = MyThread()  <span class="comment">#类继承法是python多线程的另外一种实现方式</span></span><br><span class="line">        my_thread.start()</span><br><span class="line">		</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">线程 Thread<span class="number">-1</span> , 想拿: 苹果--Sun Apr <span class="number">28</span> <span class="number">12</span>:<span class="number">21</span>:<span class="number">06</span> <span class="number">2019</span></span><br><span class="line">线程 Thread<span class="number">-1</span> , 想拿: 香蕉--Sun Apr <span class="number">28</span> <span class="number">12</span>:<span class="number">21</span>:<span class="number">06</span> <span class="number">2019</span></span><br><span class="line">线程 Thread<span class="number">-1</span> , 想拿: 香蕉--Sun Apr <span class="number">28</span> <span class="number">12</span>:<span class="number">21</span>:<span class="number">06</span> <span class="number">2019</span></span><br><span class="line">线程 Thread<span class="number">-2</span> , 想拿: 苹果--Sun Apr <span class="number">28</span> <span class="number">12</span>:<span class="number">21</span>:<span class="number">06</span> <span class="number">2019</span></span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h3 id="Python递归锁RLock"><a href="#Python递归锁RLock" class="headerlink" title="Python递归锁RLock"></a>Python递归锁RLock</h3><p>为了支持在同一线程中多次请求同一资源，python提供了”递归锁”：threading.RLock。RLock内部维护着一个Lock和一个counter变量，counter记录了acquire的次数，从而使得资源可以被多次acquire。直到一个线程所有的acquire都被release，其他的线程才能获得资源。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">lock = threading.RLock()  <span class="comment">#递归锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.fun1()</span><br><span class="line">        self.fun2()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        lock.acquire()  <span class="comment"># 如果锁被占用,则阻塞在这里,等待锁的释放</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"线程 %s , 想拿: %s--%s"</span> %(self.name, <span class="string">"苹果"</span>,time.ctime()))</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"线程 %s , 想拿: %s--%s"</span> %(self.name, <span class="string">"香蕉"</span>,time.ctime()))</span><br><span class="line">        lock.release()</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"线程 %s , 想拿: %s--%s"</span> %(self.name, <span class="string">"香蕉"</span>,time.ctime()))</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">        lock.acquire()</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"线程 %s , 想拿: %s--%s"</span> %(self.name, <span class="string">"苹果"</span>,time.ctime()))</span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line">        lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):  <span class="comment">#建立10个线程</span></span><br><span class="line">        my_thread = MyThread()  <span class="comment">#类继承法是python多线程的另外一种实现方式</span></span><br><span class="line">        my_thread.start()</span><br></pre></td></tr></table></figure>
<p>可以把RLock理解为大锁中还有小锁，只有等到内部所有的小锁，都没有了，其他的线程才能进入这个公共资源。</p>
<p><strong>如果都上锁了，也就是单线程了，那开多线程有什么用呢？</strong></p>
<p>在访问共享资源的时候，锁是一定要存在了，但是代码中不是总是在访问公共资源，还有一些其他的逻辑可以使用多线程，所以在代码里面加锁的时候，要注意在什么地方加，对性能的影响最小。</p>
<h2 id="Python多线程之同步条件，信号量和队列"><a href="#Python多线程之同步条件，信号量和队列" class="headerlink" title="Python多线程之同步条件，信号量和队列"></a>Python多线程之同步条件，信号量和队列</h2><h3 id="同步条件（Event）"><a href="#同步条件（Event）" class="headerlink" title="同步条件（Event）"></a>同步条件（Event）</h3><p><strong>为什么需要同步条件？</strong></p>
<p>python多线程在执行task过程中，是相互竞争的，大家都可以先获取cpu的执行权限，这就是问题所在的地方，每个线程都是独立运行且状态不可预测，但是如果业务中需要根据情况来决定线程的执行顺序，也就是程序中的其他线程需要通过判断某个线程的状态来确定自己下一步的操作，这时候就需要使用threading库中的Event对象。它包含一个可由线程设置的信号标志，允许线程等待某些事件的发生。</p>
<p>场景：老师说这堂课我们要做测试卷子，做完才能放学；学生叫苦连天，啊啊啊啊啊啊；学生做试卷中；做完试卷放学回家</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"大家现在要考试"</span>) </span><br><span class="line">        print(event.isSet())</span><br><span class="line">        event.set() <span class="comment"># 老师线程说完"大家现在要考试"，然后event.set()，执行event,设置完执行，学生线程就能够被唤醒继续执行下面的操作发出"啊啊啊啊啊啊"的叫苦连天</span></span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">        print(<span class="string">"考试结束"</span>)</span><br><span class="line">        print(event.isSet())</span><br><span class="line">        event.set() <span class="comment"># 老师线程执行event.set()，唤醒学生线程，然后下课回家.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        event.wait()</span><br><span class="line">        print(<span class="string">"啊啊啊啊啊啊"</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        event.clear() <span class="comment"># 学生线程进行考试，并且执行event.clear()，清除event，因为他们在等老师说“考试结束”，之后他们在等老师线程的event.set()</span></span><br><span class="line">        event.wait() <span class="comment"># 学生线程开始event.wait()，这个说明如果event如果一直不设置的话，学生线程就一直等待，等待一个event.set()操作</span></span><br><span class="line">        print(<span class="string">"下课回家"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    event=threading.Event()</span><br><span class="line">    threads=[]</span><br><span class="line">	<span class="comment"># 模拟1个老师和10个学生，进行考试，学生线程要等待老师线程说完“大家现在考试”，然后学生线程去考试，之后老师线程说“考试结束”，学生线程放学回家，学生线程的执行与否取决于老师线程，所以这里用的Event</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        threads.append(Student())</span><br><span class="line">    threads.append(Teacher())</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">		</span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">大家现在要考试</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">啊啊啊啊啊啊</span><br><span class="line">考试结束</span><br><span class="line"><span class="literal">False</span></span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">下课回家</span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h3><p>信号量用来控制线程并发数的，Semaphore管理一个内置的计数 器，每当调用acquire()时-1，调用release()时+1。计数器不能小于0，当计数器为 0时，acquire()将阻塞线程至同步锁定状态，直到其他线程调用release()。其实就是控制最多几个线程可以操作同享资源。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">semaphore = threading.Semaphore(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> semaphore.acquire():</span><br><span class="line">        <span class="keyword">print</span> (threading.currentThread().getName() + <span class="string">'获取共享资源'</span>)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        semaphore.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">  t1 = threading.Thread(target=func)</span><br><span class="line">  t1.start()</span><br><span class="line">  </span><br><span class="line">结果：创建<span class="number">10</span>个线程，让每次只让<span class="number">5</span>个线程去执行func函数。<span class="number">5</span>个线程一批一批的执行打印,中间停格<span class="number">2</span>s</span><br><span class="line"></span><br><span class="line">Thread<span class="number">-1</span>获取共享资源</span><br><span class="line">Thread<span class="number">-2</span>获取共享资源</span><br><span class="line">Thread<span class="number">-3</span>获取共享资源</span><br><span class="line">Thread<span class="number">-4</span>获取共享资源</span><br><span class="line">Thread<span class="number">-5</span>获取共享资源</span><br><span class="line"></span><br><span class="line">Thread<span class="number">-6</span>获取共享资源</span><br><span class="line">Thread<span class="number">-8</span>获取共享资源</span><br><span class="line">Thread<span class="number">-7</span>获取共享资源</span><br><span class="line">Thread<span class="number">-9</span>获取共享资源</span><br></pre></td></tr></table></figure>
<h3 id="队列（Queue）"><a href="#队列（Queue）" class="headerlink" title="队列（Queue）"></a>队列（Queue）</h3><p>Queue提供了一个适用于多线程编程的先进先出的数据结构，用来在生产者和消费者线程之间的信息传递</p>
<p><strong>list不是线程安全的</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading,time</span><br><span class="line"></span><br><span class="line">m=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">print(m[<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_last</span><span class="params">()</span>:</span></span><br><span class="line">    a=m[<span class="number">-1</span>]</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    m.remove(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t1=threading.Thread(target=remove_last)</span><br><span class="line">t1.start()</span><br><span class="line"></span><br><span class="line">t2=threading.Thread(target=remove_last)</span><br><span class="line">t2.start()</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">ValueError: list.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> list</span><br></pre></td></tr></table></figure>
<p>开2个线程取队列M的最后一个数，按道理是最后m的数据会被remove完，但是结果却报错了，这是因为list不是线程安全的，线程1取了最后一个数据删除但是sleep1秒的时候，线程2也拿到了相同的数，那么等线程1 remove这个数之后，线程2再去remove就会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建一个“队列”对象</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line">q = Queue.Queue(maxsize = <span class="number">10</span>)</span><br><span class="line">Queue.Queue类即是一个队列的同步实现。队列长度可为无限或者有限。可通过Queue的构造函数的可选参数maxsize来设定队列长度。如果maxsize小于<span class="number">1</span>就表示队列长度无限。</span><br><span class="line"></span><br><span class="line">将一个值放入队列中</span><br><span class="line">q.put(<span class="number">10</span>)</span><br><span class="line">调用队列对象的put()方法在队尾插入一个项目。put()有两个参数，第一个item为必需的，为插入项目的值；第二个block为可选参数，默认为</span><br><span class="line"><span class="number">1</span>。如果队列当前为空且block为<span class="number">1</span>，put()方法就使调用线程暂停,直到空出一个数据单元。如果block为<span class="number">0</span>，put方法将引发Full异常。</span><br><span class="line"></span><br><span class="line">将一个值从队列中取出</span><br><span class="line">q.get()</span><br><span class="line">调用队列对象的get()方法从队头删除并返回一个项目。可选参数为block，默认为<span class="literal">True</span>。如果队列为空且block为<span class="literal">True</span>，</span><br><span class="line">get()就使调用线程暂停，直至有项目可用。如果队列为空且block为<span class="literal">False</span>，队列将引发Empty异常。</span><br><span class="line"></span><br><span class="line">Python Queue模块有三种队列及构造函数:</span><br><span class="line"><span class="number">1</span>、Python Queue模块的FIFO队列先进先出。   <span class="class"><span class="keyword">class</span> <span class="title">queue</span>.<span class="title">Queue</span><span class="params">(maxsize)</span></span></span><br><span class="line"><span class="class">2、<span class="title">LIFO</span>类似于堆，即先进后出。               <span class="title">class</span> <span class="title">queue</span>.<span class="title">LifoQueue</span><span class="params">(maxsize)</span></span></span><br><span class="line"><span class="class">3、还有一种是优先级队列级别越低越先出来。        <span class="title">class</span> <span class="title">queue</span>.<span class="title">PriorityQueue</span><span class="params">(maxsize)</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">此包中的常用方法<span class="params">(q = Queue.Queue<span class="params">()</span>)</span>:</span></span><br><span class="line">q.qsize() 返回队列的大小</span><br><span class="line">q.empty() 如果队列为空，返回<span class="literal">True</span>,反之<span class="literal">False</span></span><br><span class="line">q.full() 如果队列满了，返回<span class="literal">True</span>,反之<span class="literal">False</span></span><br><span class="line">q.full 与 maxsize 大小对应</span><br><span class="line">q.get([block[, timeout]]) 获取队列，timeout等待时间</span><br><span class="line">q.get_nowait() 相当q.get(<span class="literal">False</span>)</span><br><span class="line">非阻塞 q.put(item) 写入队列，timeout等待时间</span><br><span class="line">q.put_nowait(item) 相当q.put(item, <span class="literal">False</span>)</span><br><span class="line">q.task_done() 在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号</span><br><span class="line">q.join() 实际上意味着等到队列为空，再执行别的操作</span><br></pre></td></tr></table></figure>
<p><strong>队列(queue)一般会被用在生产者和消费者模型上</strong></p>
<ul>
<li>为什么要使用生产者和消费者模式</li>
</ul>
<p>在python线程中，生产者就是生产数据的线程，消费者就是消费数据的线程。在多线程开发当中，如果生产者处理速度很快，而消费者处理速度很慢，那么生产者就必须等待消费者处理完，才能继续生产数据。同样的道理，如果消费者的处理能力大于生产者，那么消费者就必须等待生产者。为了解决这个问题于是引入了生产者和消费者模式。</p>
<ul>
<li>什么是生产者消费者模式</li>
</ul>
<p>生产者消费者模式是通过一个容器来解决生产者和消费者的强耦合问题。生产者和消费者彼此之间不直接通讯，而通过阻塞队列来进行通讯，所以生产者生产完数据之后不用等待消费者处理，直接扔给阻塞队列，消费者不找生产者要数据，而是直接从阻塞队列里取，阻塞队列就相当于一个缓冲区，平衡了生产者和消费者的处理能力。</p>
<p>举个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="keyword">import</span> queue,threading</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Producer</span><span class="params">(name)</span>:</span></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> count &lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"制造包子ing"</span>)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">3</span>))</span><br><span class="line">    q.put(count)</span><br><span class="line">    print(<span class="string">'生产者 %s 生产了 %s 包子..'</span> %(name, count))</span><br><span class="line">    count +=<span class="number">1</span></span><br><span class="line">    <span class="comment">#q.task_done()</span></span><br><span class="line">    <span class="comment">#q.join()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Consumer</span><span class="params">(name)</span>:</span></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> count &lt;<span class="number">10</span>:</span><br><span class="line">    time.sleep(random.randrange(<span class="number">4</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        data = q.get()</span><br><span class="line">        <span class="comment">#q.task_done()</span></span><br><span class="line">        <span class="comment">#q.join()</span></span><br><span class="line">        print(data)</span><br><span class="line">        print(<span class="string">'消费者 %s 消费了 %s 包子...'</span> %(name, data))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"包子吃完了"</span>)</span><br><span class="line">    count +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">c1 = threading.Thread(target=Producer, args=(<span class="string">'小明'</span>,))</span><br><span class="line">c2 = threading.Thread(target=Consumer, args=(<span class="string">'小花'</span>,))</span><br><span class="line">c3 = threading.Thread(target=Consumer, args=(<span class="string">'小灰'</span>,))</span><br><span class="line">c1.start()</span><br><span class="line">c2.start()</span><br><span class="line">c3.start()</span><br><span class="line"></span><br><span class="line">c1.join()</span><br><span class="line">c2.join()</span><br><span class="line">c3.join()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'结束'</span>)</span><br></pre></td></tr></table></figure>
<p>上面的代码还可以使用下面的方法来实现<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">q.task_done() 在完成一项工作之后，q.task_done() 函数向任务已经完成的队列发送一个信号</span><br><span class="line">q.join() 实际上意味着等到队列为空，再执行别的操作</span><br><span class="line"><span class="keyword">import</span> time,random</span><br><span class="line"><span class="keyword">import</span> queue,threading</span><br><span class="line"></span><br><span class="line">q = queue.Queue()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Producer</span><span class="params">(name)</span>:</span></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> count &lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">"制造包子ing"</span>)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">3</span>))</span><br><span class="line">    q.put(count)</span><br><span class="line">    print(<span class="string">'生产者 %s 生产了 %s 包子..'</span> %(name, count))</span><br><span class="line">    count +=<span class="number">1</span></span><br><span class="line">    q.task_done()</span><br><span class="line">    <span class="comment">#q.join()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Consumer</span><span class="params">(name)</span>:</span></span><br><span class="line">  count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> count &lt;<span class="number">10</span>:</span><br><span class="line">    time.sleep(random.randrange(<span class="number">4</span>))</span><br><span class="line">    data = q.get()</span><br><span class="line">    <span class="comment">#q.task_done()</span></span><br><span class="line">    print(<span class="string">'等待中'</span>)</span><br><span class="line">    q.join()</span><br><span class="line">    print(<span class="string">'消费者 %s 消费了 %s 包子...'</span> %(name, data))</span><br><span class="line">    count +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">c1 = threading.Thread(target=Producer, args=(<span class="string">'小明'</span>,))</span><br><span class="line">c2 = threading.Thread(target=Consumer, args=(<span class="string">'小花'</span>,))</span><br><span class="line">c3 = threading.Thread(target=Consumer, args=(<span class="string">'小灰'</span>,))</span><br><span class="line">c4 = threading.Thread(target=Consumer, args=(<span class="string">'小天'</span>,))</span><br><span class="line"></span><br><span class="line">c1.start()</span><br><span class="line">c2.start()</span><br><span class="line">c3.start()</span><br><span class="line">c4.start()</span><br></pre></td></tr></table></figure></p>
<h2 id="Python多进程"><a href="#Python多进程" class="headerlink" title="Python多进程"></a>Python多进程</h2><h3 id="Python多进程模块"><a href="#Python多进程模块" class="headerlink" title="Python多进程模块"></a>Python多进程模块</h3><p>Python中的多进程是通过multiprocessing包来实现的，和多线程的threading.Thread差不多，它可以利用multiprocessing.Process对象来创建一个进程对象。这个进程对象的方法和线程对象的方法差不多也有start(), run(), join()等方法，其中有一个方法不同Thread线程对象中的守护线程方法是setDeamon，而Process进程对象的守护进程是通过设置daemon属性来完成的。</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>多线程与多进程</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2022/02/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>&emsp;&emsp;<br><a id="more"></a></p>
<h1 id="Ciao"><a href="#Ciao" class="headerlink" title="Ciao"></a>Ciao</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">前半段nums[0]~nums[i-1]是有序段；后半段nums[i]~nums[n]是“无序段”</span></span><br><span class="line"><span class="string">时间复杂度:最好情况O(n);最坏情况O($n^2$);平均情况O(n^2)</span></span><br><span class="line"><span class="string">稳定排序</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                <span class="keyword">if</span> nums[i] &lt; nums[j]:</span><br><span class="line">                    nums[i], nums[j] = nums[j], nums[i]</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h4 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">i为待排序元素位置</span></span><br><span class="line"><span class="string">在0~i-1中进行判断</span></span><br><span class="line"><span class="string">mid = (l + r + 1)//2</span></span><br><span class="line"><span class="string">&gt;: r = mid - 1</span></span><br><span class="line"><span class="string">&lt;: l = mid + 1</span></span><br><span class="line"><span class="string">r+1~i-1往后挪一位，i位置元素插入r+1</span></span><br><span class="line"><span class="string">减少了比较次数，没有减少移动次数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hinsert</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> nums[<span class="number">1</span>] &lt; nums[<span class="number">0</span>]: nums[<span class="number">1</span>], nums[<span class="number">0</span>] = nums[<span class="number">0</span>], nums[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">            l, r = <span class="number">0</span>, i - <span class="number">1</span></span><br><span class="line">            temp = nums[i]</span><br><span class="line">            <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">                mid = (l + r + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">                <span class="keyword">if</span> nums[mid] &gt; temp: r = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>: l = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i<span class="number">-1</span>, r, <span class="number">-1</span>): nums[j+<span class="number">1</span>] = nums[j]</span><br><span class="line">            nums[r+<span class="number">1</span>] = temp</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">缩小增量，增量序列互质</span></span><br><span class="line"><span class="string">多遍插入排序</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ShellSort</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>]:</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">				<span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">0</span>, j, i):</span><br><span class="line">					<span class="keyword">if</span> nums[j] &lt; nums[k]: nums[j], nums[k] = nums[k], nums[j]</span><br><span class="line">		<span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h3 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">n个记录只需要n-1趟，第i趟只需要比较n-i次</span></span><br><span class="line"><span class="string">每次都把极值放到了后面</span></span><br><span class="line"><span class="string">如果一趟下来没有发生任何调整，后面也就不需要继续操作了</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">BubbleSort</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>-i):</span><br><span class="line">				<span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]: nums[j], nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">		<span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改进版本</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">BubbleSort</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">		flag = <span class="number">1</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">			<span class="keyword">if</span> flag == <span class="number">0</span>: <span class="keyword">return</span> nums</span><br><span class="line">			flag = <span class="number">0</span></span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>-i):</span><br><span class="line">				<span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]: </span><br><span class="line">					nums[j], nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">					flag = <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">QuitSort</span><span class="params">(self, l, r, nums)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> l &lt; r:</span><br><span class="line">			loc = self.Sort(l, r, nums)</span><br><span class="line">			self.QuitSort(l, loc<span class="number">-1</span>, nums)</span><br><span class="line">			self.QuitSort(loc+<span class="number">1</span>, r, nums)</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">Sort</span><span class="params">(self, l, r, nums)</span>:</span></span><br><span class="line">	    now = nums[l]</span><br><span class="line">		<span class="keyword">while</span> l&lt;r:</span><br><span class="line">			<span class="keyword">while</span> l&lt;r <span class="keyword">and</span> nums[r] &gt; now: r -= <span class="number">1</span></span><br><span class="line">			nums[l] = nums[r]</span><br><span class="line">			<span class="keyword">while</span> l&lt;r <span class="keyword">and</span> nums[l] &lt; now: l += <span class="number">1</span></span><br><span class="line">			nums[r] = nums[l]</span><br><span class="line">		nums[l] = now</span><br><span class="line">		<span class="keyword">return</span> l	</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">QuitSort</span><span class="params">(self, l, r, nums)</span>:</span></span><br><span class="line">        start = l</span><br><span class="line">        end = r</span><br><span class="line">        <span class="keyword">if</span> start &gt; end: <span class="keyword">return</span></span><br><span class="line">        now = nums[l]</span><br><span class="line">        <span class="keyword">while</span> l &lt; r:</span><br><span class="line">            <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[r] &gt; now: r -= <span class="number">1</span></span><br><span class="line">            nums[l] = nums[r]</span><br><span class="line">            <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> nums[l] &lt; now: l += <span class="number">1</span></span><br><span class="line">            nums[r] = nums[l]</span><br><span class="line">        nums[l] = now</span><br><span class="line">        self.QuitSort(start, l - <span class="number">1</span>, nums)</span><br><span class="line">        self.QuitSort(l + <span class="number">1</span>, end, nums)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	s = Solution()</span><br><span class="line">	n = len(nums)</span><br><span class="line">	s.QuitSort(o, n<span class="number">-1</span>, nums)</span><br><span class="line">	print(nums)</span><br></pre></td></tr></table></figure>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Sort</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            k = i</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n):</span><br><span class="line">                <span class="keyword">if</span> nums[j] &lt; nums[k]: k = j</span><br><span class="line">			<span class="keyword">if</span> k != i: nums[i], nums[k] = nums[k], nums[i]</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">根最小为小根堆；根最大为大根堆</span></span><br><span class="line"><span class="string">如果需要在大一个数组中找到前100个最大的数，只需要维护一个包含100个元素的小根堆即可</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">heap</span><span class="params">(self, nums, heap_size, parent_index)</span>:</span></span><br><span class="line">		<span class="comment"># temp保存需要下沉的父节点，用于最后赋值</span></span><br><span class="line">		temp = heap[parent_index]</span><br><span class="line">		child_index = <span class="number">2</span>*parent_index + <span class="number">1</span></span><br><span class="line">		<span class="keyword">while</span> child_index &lt; heap_size:</span><br><span class="line">			<span class="comment"># 如果有右孩子，且右孩子比左孩子大，则定位到右孩子</span></span><br><span class="line">			<span class="keyword">if</span> child_index+<span class="number">1</span> &lt; heap_size <span class="keyword">and</span> nums[child_index+<span class="number">1</span>] &gt; nums[child_index]: child_index += <span class="number">1</span></span><br><span class="line">			<span class="comment"># 如果父节点的值不小于左右孩子节点的值，可直接跳出循环</span></span><br><span class="line">			<span class="keyword">if</span> nums[parent_index] &gt; nums[child_index]: <span class="keyword">break</span></span><br><span class="line">			nums[parent_index] = nums[child_index]</span><br><span class="line">			parent_index = child_index</span><br><span class="line">			child_index = <span class="number">2</span>*parent_index + <span class="number">1</span></span><br><span class="line">		heap[child_index] = temp</span><br><span class="line">			</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">Sort</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">		<span class="comment"># 1. 无序列表构建成最大堆</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>//<span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">			self.heap(nums, n, i)</span><br><span class="line">		<span class="comment"># 2. 循环删除堆顶元素，移到列表尾部，调节堆产生新的堆顶</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">			self.heap(nums, i, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">将两个或两个以上的有序子序列“归并”为一个有序序列</span></span><br><span class="line"><span class="string">仅需要$log_2n$趟</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, left, mid, right, nums)</span>:</span></span><br><span class="line">		L, R = nums[left:mid], nums[mid, right]</span><br><span class="line">		start_L, start_R = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">		new_nums = []</span><br><span class="line">		n_L, n_R = mid-left, right-mid</span><br><span class="line">		<span class="keyword">while</span> start_L &lt; n_L <span class="keyword">and</span> start_R &lt; n_R:</span><br><span class="line">			<span class="keyword">if</span> L[start_L] &lt; R[start_R]: </span><br><span class="line">				new_nums.append(L[start_L])</span><br><span class="line">				sytart_L += <span class="number">1</span></span><br><span class="line">			<span class="keyword">else</span>: </span><br><span class="line">				new_nums.append(R[start_R])</span><br><span class="line">				start_R += <span class="number">1</span></span><br><span class="line">		new_nums += L[start_L:]</span><br><span class="line">		new_nums += R[start_R:]</span><br><span class="line">		nums[left:right] = new_nums</span><br><span class="line">		 </span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">Sort</span><span class="params">(self, n, nums)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> left &lt; right<span class="number">-1</span>:</span><br><span class="line">			mid = (left + right)//<span class="number">2</span></span><br><span class="line">			self.Sort(left, mid, nums)</span><br><span class="line">			self.Sort(mid, right, nums)</span><br><span class="line">			self.merge(left, mid, right, nums)</span><br></pre></td></tr></table></figure>
<h3 id="基数排序-桶排序"><a href="#基数排序-桶排序" class="headerlink" title="基数排序/桶排序"></a>基数排序/桶排序</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">分配+收集</span></span><br><span class="line"><span class="string">总共十个桶，按个十百千</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Sort</span><span class="params">(self, bucket_size, n, nums)</span>:</span></span><br><span class="line">        Max, Min = max(nums), min(nums)</span><br><span class="line">        num_bucket = (Max - Min)//scape + <span class="number">1</span></span><br><span class="line">        bucket = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(num_bucket)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> num_bucket: bucket[(i-Min)//bucket_size].append(i)</span><br><span class="line">        nums.clear()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_bucket): nums.extend(sorted(bucket[i]))</span><br><span class="line">        <span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h2 id="Leetcode"><a href="#Leetcode" class="headerlink" title="Leetcode"></a>Leetcode</h2><h3 id="20-有效括号"><a href="#20-有效括号" class="headerlink" title="20.有效括号"></a>20.有效括号</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        dic = &#123;<span class="string">'&#123;'</span>: <span class="string">'&#125;'</span>,  <span class="string">'['</span>: <span class="string">']'</span>, <span class="string">'('</span>: <span class="string">')'</span>, <span class="string">'?'</span>: <span class="string">'?'</span>&#125;</span><br><span class="line">        stack = [<span class="string">'?'</span>]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> dic: stack.append(c)</span><br><span class="line">            <span class="keyword">elif</span> dic[stack.pop()] != c: <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">        <span class="keyword">return</span> len(stack) == <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="22-生成括号"><a href="#22-生成括号" class="headerlink" title="22.生成括号"></a>22.生成括号</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(slef, string, left, right)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> left == <span class="number">0</span> <span class="keyword">and</span> right == <span class="number">0</span>: result.append(string)</span><br><span class="line">		<span class="keyword">if</span> left &gt; right: <span class="keyword">return</span>   </span><br><span class="line">		<span class="keyword">if</span> left &gt; <span class="number">0</span>: self.dfs(string+<span class="string">"("</span>, left<span class="number">-1</span>, right)</span><br><span class="line">		<span class="keyword">if</span> right &gt; <span class="number">0</span>: self.dfs(string+<span class="string">")"</span>, left, right<span class="number">-1</span>)</span><br><span class="line">		</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	s = Solution()</span><br><span class="line">	n = <span class="number">3</span></span><br><span class="line">	result = []</span><br><span class="line">	s.dfs(<span class="string">""</span>, n, n)</span><br><span class="line">	print(result)</span><br></pre></td></tr></table></figure>
<h3 id="24-两两交换"><a href="#24-两两交换" class="headerlink" title="24 两两交换"></a>24 两两交换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        thead = ListNode(<span class="number">-1</span>)</span><br><span class="line">        thead.next = head</span><br><span class="line">        c = thead</span><br><span class="line">        <span class="keyword">while</span> c.next <span class="keyword">and</span> c.next.next:</span><br><span class="line">            a, b=c.next, c.next.next</span><br><span class="line">            c.next, a.next = b, b.next</span><br><span class="line">            b.next = a</span><br><span class="line">            c = c.next.next</span><br><span class="line">        <span class="keyword">return</span> thead.next</span><br></pre></td></tr></table></figure>
<h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27 移除元素"></a>27 移除元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">Leetcode</span><span class="params">(self, nums, val)</span>:</span></span><br><span class="line">		left, right = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">		<span class="keyword">while</span> left &lt;= right:</span><br><span class="line">			<span class="keyword">if</span> nums[left] != val: left += <span class="number">1</span></span><br><span class="line">			<span class="keyword">else</span>: </span><br><span class="line">				nums[left] = nums[right]</span><br><span class="line">				right -= <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>
<h3 id="49-字母异位词"><a href="#49-字母异位词" class="headerlink" title="49 字母异位词"></a>49 字母异位词</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, strs: List[str])</span> -&gt; List[List[str]]:</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> strs:</span><br><span class="line">            s = <span class="string">''</span>.join(sorted(i))</span><br><span class="line">            <span class="keyword">if</span> s <span class="keyword">not</span> <span class="keyword">in</span> d: d[s] = [i]</span><br><span class="line">            <span class="keyword">else</span>: d[s].append(i)</span><br><span class="line">        <span class="keyword">return</span> [v <span class="keyword">for</span> v <span class="keyword">in</span> d.values()]</span><br></pre></td></tr></table></figure>
<h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><h4 id="189-轮转数组空间复杂度O（1）"><a href="#189-轮转数组空间复杂度O（1）" class="headerlink" title="189 轮转数组空间复杂度O（1）"></a>189 轮转数组空间复杂度O（1）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转三次</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">		n = len(nums)</span><br><span class="line">		k = k%n</span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(l, r)</span>:</span></span><br><span class="line">			<span class="keyword">while</span> l &lt; r:</span><br><span class="line">				nums[l], nums[r] = nums[r], nums[l]</span><br><span class="line">				l += <span class="number">1</span></span><br><span class="line">				r -= <span class="number">1</span></span><br><span class="line">		swap(<span class="number">0</span>, n-k<span class="number">-1</span>)</span><br><span class="line">		swap(n-k, n<span class="number">-1</span>)</span><br><span class="line">		swap(<span class="number">0</span>, n<span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h4 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283 移动零"></a>283 移动零</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 双指针</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">		l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">		<span class="keyword">while</span> r &lt; n:</span><br><span class="line">			<span class="keyword">if</span> nums[r] != <span class="number">0</span>:</span><br><span class="line">				nums[l], nums[r] = nums[r], nums[l]</span><br><span class="line">				l += <span class="number">1</span></span><br><span class="line">			r += <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> nums</span><br></pre></td></tr></table></figure>
<h4 id="1-两数之和（无序数组）"><a href="#1-两数之和（无序数组）" class="headerlink" title="1 两数之和（无序数组）"></a>1 两数之和（无序数组）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字典</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">		hashmap = &#123;&#125;</span><br><span class="line">		<span class="keyword">for</span> ind, num <span class="keyword">in</span> enumerate(nums): hashmap[num] = ind</span><br><span class="line">		<span class="keyword">for</span> ind, num <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">			j = hashmap.get(target-num)</span><br><span class="line">			<span class="keyword">if</span> j <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> i != j: <span class="keyword">return</span> [i, j]</span><br></pre></td></tr></table></figure>
<h4 id="167-两数之和（有序数组）"><a href="#167-两数之和（有序数组）" class="headerlink" title="167 两数之和（有序数组）"></a>167 两数之和（有序数组）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二分法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">			l, r = i+<span class="number">1</span>, n<span class="number">-1</span></span><br><span class="line">			<span class="keyword">while</span> l &lt;= r:</span><br><span class="line">				mid = (l+r)//<span class="number">2</span></span><br><span class="line">				<span class="keyword">if</span> nums[mid] == target - nums[i]: <span class="keyword">return</span> [i, mid]</span><br><span class="line">				<span class="keyword">elif</span> nums[mid] &gt; target - nums[i]: right = mid - <span class="number">1</span></span><br><span class="line">				<span class="keyword">else</span>: left = mid + <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">		</span><br><span class="line"><span class="comment"># 双指针</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, nums,target)</span>:</span></span><br><span class="line">		l, r = <span class="number">0</span>, len(nums)<span class="number">-1</span></span><br><span class="line">		<span class="keyword">while</span> l &lt; r:</span><br><span class="line">			<span class="keyword">if</span> nums[l] + nums[r] == target: <span class="keyword">return</span> [l, r]</span><br><span class="line">			<span class="keyword">elif</span> nums[l] + nums[r] &gt; target: r -= <span class="number">1</span></span><br><span class="line">			<span class="keyword">else</span>: l += <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h4 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34 在排序数组中查找元素的第一个和最后一个位置"></a>34 在排序数组中查找元素的第一个和最后一个位置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Class Solution:</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, nums, target)</span>:</span></span><br></pre></td></tr></table></figure>
<h4 id="876-链表中间结点"><a href="#876-链表中间结点" class="headerlink" title="876 链表中间结点"></a>876 链表中间结点</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快慢指针</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">middleNode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next: <span class="keyword">return</span> head </span><br><span class="line">        slow = head</span><br><span class="line">        fast = head</span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>
<h4 id="19-删除链表的倒数第N个结点"><a href="#19-删除链表的倒数第N个结点" class="headerlink" title="19 删除链表的倒数第N个结点"></a>19 删除链表的倒数第N个结点</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, head, n)</span>:</span></span><br><span class="line">		slow, fast = head, head</span><br><span class="line">		<span class="keyword">for</span> _ <span class="keyword">in</span> range(n): fast = fast.next</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> fast: <span class="keyword">return</span> head.next </span><br><span class="line">		<span class="keyword">while</span> fast.next:</span><br><span class="line">			slow = slow.next</span><br><span class="line">			fast = fast.next</span><br><span class="line">		slow.next = slow.next.next</span><br><span class="line">		<span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>
<h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><h4 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3* 无重复字符的最长子串"></a>3* 无重复字符的最长子串</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, s)</span>:</span></span><br><span class="line">		result, cur = <span class="number">0</span>, []</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">			<span class="keyword">while</span> i <span class="keyword">in</span> cur: cur.pop(<span class="number">0</span>) <span class="comment"># 删除第一个元素</span></span><br><span class="line">			cur.append(i)</span><br><span class="line">			result = max(result, len(cur))</span><br><span class="line">		<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h4 id="567-字符串的排列"><a href="#567-字符串的排列" class="headerlink" title="567 字符串的排列"></a>567 字符串的排列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, s1, s2)</span>:</span></span><br><span class="line">		n1, n2 = len(s1), len(s2)</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n2-n1+<span class="number">1</span>):</span><br><span class="line">			<span class="keyword">if</span> s2[i] <span class="keyword">in</span> s1:</span><br><span class="line">				<span class="keyword">if</span> sorted(s2[i:i+s1]) == sorted(s1): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, s1, s2)</span>:</span></span><br><span class="line">		n1, n2 = len(s1), len(s2)</span><br><span class="line">		left, right = <span class="number">0</span>, n1<span class="number">-1</span></span><br><span class="line">		counter1, counter2 = collections.Counter(s1), collcetions.Counter(s2[left:right])</span><br><span class="line">		<span class="keyword">while</span> right &lt; n2:</span><br><span class="line">			counter2[s2[right]] += <span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span> counter1 == counter2: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">			counter2[s2[left]] -= <span class="number">1</span></span><br><span class="line">			<span class="keyword">if</span> counter2[s2[left]] == <span class="number">0</span>: <span class="keyword">del</span> counter2[s2[left]]</span><br><span class="line">			left += <span class="number">1</span></span><br><span class="line">			right += <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="栈-队列"><a href="#栈-队列" class="headerlink" title="栈/队列"></a>栈/队列</h3><h4 id="20-有效括号-1"><a href="#20-有效括号-1" class="headerlink" title="20 有效括号"></a>20 有效括号</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Class Solution:</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, s)</span>:</span></span><br><span class="line">		d = &#123;<span class="string">"&#125;"</span>:<span class="string">"&#123;"</span>, <span class="string">"]"</span>:<span class="string">"["</span>, <span class="string">")"</span>, <span class="string">"("</span>&#125;</span><br><span class="line">		stack = []</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">			<span class="keyword">if</span> i <span class="keyword">in</span> d: </span><br><span class="line">				<span class="keyword">if</span> len(stack) == <span class="number">0</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">				<span class="keyword">elif</span> d[i] == stack[<span class="number">-1</span>]: stack.pop()</span><br><span class="line">				<span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">			<span class="keyword">else</span>: stack.append(i)</span><br><span class="line">		<span class="keyword">return</span> len(stack) == <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h3 id="广度优先搜索（队列）-深度优先搜索-递归-栈"><a href="#广度优先搜索（队列）-深度优先搜索-递归-栈" class="headerlink" title="广度优先搜索（队列）/深度优先搜索(递归/栈)"></a>广度优先搜索（队列）/深度优先搜索(递归/栈)</h3><h4 id="733-图像渲染"><a href="#733-图像渲染" class="headerlink" title="733 图像渲染"></a>733 图像渲染</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 队列</span></span><br><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, image, sr, sc, newColor)</span>:</span></span><br><span class="line">		row, col = len(image), len(image[<span class="number">0</span>])</span><br><span class="line">		directions = [[<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>]]</span><br><span class="line">		<span class="keyword">if</span> image[sr][sc] == newColor: <span class="keyword">return</span> image</span><br><span class="line">		q = Queue()</span><br><span class="line">		q.put((sr, sc))</span><br><span class="line">		oldColor = image[sr][sc]</span><br><span class="line">		<span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">			p = q.get()</span><br><span class="line">			image[p[<span class="number">0</span>]][p[<span class="number">1</span>]] = newColor</span><br><span class="line">			<span class="keyword">for</span> d <span class="keyword">in</span> directions:</span><br><span class="line">				new_row = p[<span class="number">0</span>] + d[<span class="number">0</span>]</span><br><span class="line">				new_col = p[<span class="number">1</span>] + d[<span class="number">1</span>]</span><br><span class="line">				<span class="keyword">if</span> <span class="number">0</span> &lt;= new_row &lt; row <span class="keyword">and</span> <span class="number">0</span> &lt;= new_col &lt; col <span class="keyword">and</span> image[new_row][new_col] == oldColor:</span><br><span class="line">					q.put((new_row, new_col))</span><br><span class="line">		<span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, image, sr, sc, newColor)</span>:</span></span><br><span class="line">		row, col = len(image), len(image[<span class="number">0</span>])</span><br><span class="line">		<span class="keyword">if</span> newColor == image[sr][sc]: <span class="keyword">return</span> image</span><br><span class="line">		stack, oldColor = [(sr, sc)], image[sr][sc]</span><br><span class="line">		<span class="keyword">while</span> stack:</span><br><span class="line">			p = stack.pop()</span><br><span class="line">			image[p[<span class="number">0</span>]][p[<span class="number">1</span>]] = newColor</span><br><span class="line">			<span class="keyword">for</span> new_row, new_col <span class="keyword">in</span> zip((p[<span class="number">0</span>], p[<span class="number">0</span>],p[<span class="number">0</span>]<span class="number">-1</span>, p[<span class="number">0</span>]+<span class="number">1</span>), (p[<span class="number">1</span>]+<span class="number">1</span>, p[<span class="number">1</span>]<span class="number">-1</span>, p[<span class="number">1</span>], p[<span class="number">1</span>])):</span><br><span class="line">					<span class="keyword">if</span> <span class="number">0</span>&lt;=new_row&lt;row <span class="keyword">and</span> <span class="number">0</span>&lt;=new_col&lt;col <span class="keyword">and</span> image[new_row][new_col] == oldColor:</span><br><span class="line">						stack.append((new_row, new_col))</span><br><span class="line">		<span class="keyword">return</span> image</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, image, sr, sc, newColor)</span>:</span></span><br><span class="line">		row, col = len(image), len(image[<span class="number">0</span>])</span><br><span class="line">		<span class="keyword">if</span> image[sr][sc] != newColor:</span><br><span class="line">			oldColor, image[sr][sc] = image[sr][sc], newColor</span><br><span class="line">			<span class="keyword">for</span> new_row, new_col <span class="keyword">in</span> zip((sr, sr, sr<span class="number">-1</span>, sr+<span class="number">1</span>), (sc+<span class="number">1</span>, sc<span class="number">-1</span>, sc, sc)):</span><br><span class="line">				<span class="keyword">if</span> <span class="number">0</span>&lt;=new_row&lt;row <span class="keyword">and</span> <span class="number">0</span>&lt;=new_col&lt;col <span class="keyword">and</span> image[new_row][new_col] == oldColor:</span><br><span class="line">					self.leetcode(image, new_row, new_col, newColor)</span><br><span class="line">		<span class="keyword">return</span> image</span><br><span class="line">```		</span><br><span class="line"></span><br><span class="line"><span class="comment">#### 695 最大岛屿</span></span><br><span class="line">```python</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>：</span></span><br><span class="line"><span class="class">	<span class="title">def</span> <span class="title">leetcode</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">		row, col = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">		result, dir = <span class="number">0</span>, [[<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(col):</span><br><span class="line">				<span class="keyword">if</span> grid[i][j]:</span><br><span class="line">					area, stack, grid[i][j] = <span class="number">0</span>, [(i, j)], <span class="number">0</span></span><br><span class="line">					<span class="keyword">while</span> stack:</span><br><span class="line">						p = stack.pop()</span><br><span class="line">						area += <span class="number">1</span></span><br><span class="line">						<span class="keyword">for</span> d <span class="keyword">in</span> dir:</span><br><span class="line">							new_i, new_j = p[<span class="number">0</span>] + d[<span class="number">0</span>], p[<span class="number">1</span>] + d[<span class="number">1</span>]</span><br><span class="line">							<span class="keyword">if</span> <span class="number">0</span>&lt;=new_i&lt;row <span class="keyword">and</span> <span class="number">0</span>&lt;=new_j&lt;col <span class="keyword">and</span> grid[new_i][new_j]:</span><br><span class="line">								grid[new_i][new_j] = <span class="number">0</span></span><br><span class="line">								stack.append((new_i, new_j))</span><br><span class="line">					result = max(result, area)</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        result, row, col = <span class="number">0</span>, len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(new_row, new_col)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span>&lt;=new_row&lt;row <span class="keyword">and</span> <span class="number">0</span>&lt;=new_col&lt;col <span class="keyword">and</span> grid[new_row][new_col]:</span><br><span class="line">                grid[new_row][new_col] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span> + dfs(new_row<span class="number">-1</span>, new_col) + dfs(new_row+<span class="number">1</span>, new_col) + dfs(new_row, new_col<span class="number">-1</span>) + dfs(new_row, new_col+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> new_row <span class="keyword">in</span> range(row):</span><br><span class="line">            <span class="keyword">for</span> new_col <span class="keyword">in</span> range(col):</span><br><span class="line">                <span class="keyword">if</span> grid[new_row][new_col]:</span><br><span class="line">                    result = max(result, dfs(new_row, new_col))</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h4 id="合并二叉树"><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a>合并二叉树</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root1, root2)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2: <span class="keyword">return</span> root1 <span class="keyword">or</span> root2</span><br><span class="line">		result = TreeNode(root1.val+root2.val)</span><br><span class="line">		result.left = self.leetcode(root1.left, root2.left)</span><br><span class="line">		result.right = self.leetcode(root1.right, leetcode.right)</span><br><span class="line">		<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h4 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116 填充每个节点的下一个右侧节点指针"></a>116 填充每个节点的下一个右侧节点指针</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 层次遍历</span></span><br><span class="line"><span class="comment"># 层次遍历基于广度优先搜索，它和广度优先搜索的不同之处在于，广度优先搜索每次只会取出一个节点，而层次遍历会每次将队列中的所有元素都拿出来拓展</span></span><br><span class="line"><span class="keyword">import</span> collcetions</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> root</span><br><span class="line">		q = collcetions.deque([root]) <span class="comment"># 初始化队列，并将第一层节点加入队列中</span></span><br><span class="line">		<span class="keyword">while</span> q:</span><br><span class="line">		size = len(q) <span class="comment"># 记录当前队列的大小</span></span><br><span class="line">			<span class="keyword">for</span> i <span class="keyword">in</span> range(size): <span class="comment"># 遍历这一层的所有节点</span></span><br><span class="line">				node = q.popleft() <span class="comment"># 取出队首元素</span></span><br><span class="line">				<span class="keyword">if</span> i &lt; size<span class="number">-1</span>: node.next = q[<span class="number">0</span>] <span class="comment"># 连接</span></span><br><span class="line">				<span class="comment"># 拓展下一层的节点</span></span><br><span class="line">				<span class="keyword">if</span> node.left: q.append(node.left) </span><br><span class="line">				<span class="keyword">if</span> node.right: q.append(node.right)</span><br><span class="line">		<span class="comment"># 返回根节点</span></span><br><span class="line">		<span class="keyword">return</span> root</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 使用已建立的next指针</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> root</span><br><span class="line">		leftmost = root</span><br><span class="line">		<span class="comment"># 完全二叉树，当前层最左节点的左孩子不存在，说明已经到达该树的最后一层</span></span><br><span class="line">		<span class="keyword">while</span> leftmost.left:</span><br><span class="line">			head = leftmost</span><br><span class="line">			<span class="keyword">while</span> head:</span><br><span class="line">				head.left.next = head.right <span class="comment"># 情形一：同一个根节点</span></span><br><span class="line">				<span class="keyword">if</span> head.next: head.right.next = head.next.left <span class="comment"># 情形一：不同根节点</span></span><br><span class="line">				head = head.next <span class="comment"># 指针后移</span></span><br><span class="line">			leftmost = leftmost.left <span class="comment"># 去下一层的最左节点</span></span><br><span class="line">		<span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<h4 id="542-01矩阵"><a href="#542-01矩阵" class="headerlink" title="542 01矩阵"></a>542 01矩阵</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">list.pop([index=-1])：pop()函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</span></span><br><span class="line"><span class="string">用0包围1</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, mat)</span>:</span></span><br><span class="line">		row, col = len(mat), len(mat[<span class="number">0</span>])</span><br><span class="line">		result = [[<span class="number">0</span>]*col <span class="keyword">for</span> _ <span class="keyword">in</span> range(row)]</span><br><span class="line">		q = []</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(col):</span><br><span class="line">				<span class="keyword">if</span> mat[i][j] == <span class="number">0</span>: q.append([i, j])</span><br><span class="line">		<span class="keyword">while</span> q:</span><br><span class="line">			p = stack.pop(<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">for</span> d <span class="keyword">in</span> dir:</span><br><span class="line">				new_i, new_j = p[<span class="number">0</span>]+d[<span class="number">0</span>], p[<span class="number">1</span>]+d[<span class="number">1</span>]</span><br><span class="line">				<span class="keyword">if</span> <span class="number">0</span>&lt;=new_i&lt;row <span class="keyword">and</span> <span class="number">0</span>&lt;=new_j&lt;col <span class="keyword">and</span> mat[new_i][new_j]:</span><br><span class="line">					mat[new_i][new_j] = <span class="number">0</span></span><br><span class="line">					result[new_i][new_j] = result[p[<span class="number">0</span>]][p[<span class="number">1</span>]] + <span class="number">1</span></span><br><span class="line">					q.append([new_i, new_j])</span><br><span class="line">		<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h4 id="994-腐烂的橘子"><a href="#994-腐烂的橘子" class="headerlink" title="994 腐烂的橘子"></a>994 腐烂的橘子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 广度优先搜索层数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">		row, col = len(grid), len(grid[<span class="number">0</span>])</span><br><span class="line">		dir = [[<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>]]</span><br><span class="line">		q, good, new_bad = [], <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(row):</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(col):</span><br><span class="line">				<span class="keyword">if</span> grid[i][j] == <span class="number">2</span>: q.append([i, j, <span class="number">0</span>])</span><br><span class="line">				<span class="keyword">if</span> grid[i][j] == <span class="number">1</span>: good += <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> good == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		<span class="keyword">while</span> q:</span><br><span class="line">			p = q.pop(<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">for</span> d <span class="keyword">in</span> dir:</span><br><span class="line">				new_i, new_j = p[<span class="number">0</span>]+d[<span class="number">0</span>], p[<span class="number">1</span>]+d[<span class="number">1</span>]</span><br><span class="line">				<span class="keyword">if</span> <span class="number">0</span>&lt;=new_i&lt;row <span class="keyword">and</span> <span class="number">0</span>&lt;=new_j&lt;col <span class="keyword">and</span> grid[new_i][new_j] == <span class="number">1</span>:</span><br><span class="line">					grid[new_i][new_j] = <span class="number">2</span></span><br><span class="line">					new_bad += <span class="number">1</span></span><br><span class="line">					q.append([new_i, new_j, p[<span class="number">2</span>]+<span class="number">1</span>])</span><br><span class="line">			<span class="keyword">if</span> good == new_bad: <span class="keyword">return</span> p[<span class="number">2</span>]+<span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="144-二叉树的前序遍历"><a href="#144-二叉树的前序遍历" class="headerlink" title="144 二叉树的前序遍历"></a>144 二叉树的前序遍历</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		res = []</span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root)</span>:</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">			res.append(root.val)</span><br><span class="line">			dfs(root.left)</span><br><span class="line">			dfs(root.right)</span><br><span class="line">		dfs(root)</span><br><span class="line">		<span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">		cur, stack, res = root, [], []</span><br><span class="line">		<span class="keyword">while</span> cur <span class="keyword">or</span> satck:</span><br><span class="line">			<span class="keyword">while</span> cur:</span><br><span class="line">				stack.append(cur)</span><br><span class="line">				res.append(cur.val)</span><br><span class="line">				cur = cur.left</span><br><span class="line">			temp = stack.pop()</span><br><span class="line">			cur = temp.right</span><br><span class="line">		<span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">		stack, res = [root], []</span><br><span class="line">		<span class="keyword">while</span> stack:</span><br><span class="line">			node = stack.pop()</span><br><span class="line">			<span class="keyword">if</span> node:</span><br><span class="line">				res.append(node.val)</span><br><span class="line">				<span class="keyword">if</span> nodel.right: stack.append(node.right)</span><br><span class="line">				<span class="keyword">if</span> node.left: stack.append(node.left)</span><br><span class="line">		<span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h4 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94 二叉树的中序遍历"></a>94 二叉树的中序遍历</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line">Class Solution：</span><br><span class="line">	 <span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		res = []</span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root)</span>:</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> </span><br><span class="line">			dfs(root.left)</span><br><span class="line">			res.append(root.val)</span><br><span class="line">			dfs(root.right)</span><br><span class="line">		dfs(root)</span><br><span class="line">		<span class="keyword">return</span> res</span><br><span class="line">	</span><br><span class="line"><span class="comment"># 迭代</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">		cur, stack, res = root, [], []</span><br><span class="line">		<span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">			<span class="keyword">while</span> cur:</span><br><span class="line">				satck.append(cur)</span><br><span class="line">				cur = cur.left</span><br><span class="line">			temp = stack.pop()</span><br><span class="line">			res.append(temp.val)</span><br><span class="line">			cur = temp.right</span><br><span class="line">		<span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h4 id="145-二叉树的后序遍历"><a href="#145-二叉树的后序遍历" class="headerlink" title="145 二叉树的后序遍历"></a>145 二叉树的后序遍历</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		res = []</span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(root)</span>:</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">			dfs(root.left)</span><br><span class="line">			dfs(root.right)</span><br><span class="line">			res.append(root.val)</span><br><span class="line">		dfs(root)</span><br><span class="line">		<span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">		cur, stack, res = root, [], []</span><br><span class="line">		<span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">			<span class="keyword">while</span> cur:</span><br><span class="line">				res.append(cur.val)</span><br><span class="line">				stack.append(cur.right)</span><br><span class="line">			temp = stack.pop()</span><br><span class="line">			cur = temp.left</span><br><span class="line">		<span class="keyword">return</span> res[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h4 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102 二叉树的层序遍历"></a>102 二叉树的层序遍历</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">		q, res = [root], []</span><br><span class="line">		<span class="keyword">while</span> q:</span><br><span class="line">			n, level = len(q), []</span><br><span class="line">			<span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</span><br><span class="line">				temp = q.pop(<span class="number">0</span>)</span><br><span class="line">				level.append(temp.val)</span><br><span class="line">				<span class="keyword">if</span> temp.left: q.append(temp.left)</span><br><span class="line">				<span class="keyword">if</span> temp.right: q.append(temp.right)</span><br><span class="line">			res.append(level)</span><br><span class="line">		<span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h4 id="102-二叉树的最大深度"><a href="#102-二叉树的最大深度" class="headerlink" title="102 二叉树的最大深度"></a>102 二叉树的最大深度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 队列</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		q, res = [root], <span class="number">0</span></span><br><span class="line">		<span class="keyword">while</span> q:</span><br><span class="line">			res += <span class="number">1</span></span><br><span class="line">			<span class="keyword">for</span> _ <span class="keyword">in</span> range(len(q)):</span><br><span class="line">				temp = q.pop(<span class="number">0</span>)</span><br><span class="line">				<span class="keyword">if</span> temp.left: q.append(temp.left)</span><br><span class="line">				<span class="keyword">if</span> temp.right: q.append(temp.right)</span><br><span class="line">		<span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">		left = self.leetcode(root.left)</span><br><span class="line">		right = self.leetcode(root.right)</span><br><span class="line">		<span class="keyword">return</span> max(left, right) + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101 对称二叉树"></a>101 对称二叉树</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每一层都是回形</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">istrue</span><span class="params">(root1, root2)</span>:</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">and</span> <span class="keyword">not</span> root2: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> root1 <span class="keyword">or</span> <span class="keyword">not</span> root2 <span class="keyword">or</span> root1.val != root2.val: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">			<span class="keyword">return</span> istrue(root1.left, root2.right) <span class="keyword">and</span> istrue(root1.right, root2.left)</span><br><span class="line">		<span class="keyword">return</span> istrue(root.left, root.right)</span><br></pre></td></tr></table></figure>
<h4 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226 翻转二叉树"></a>226 翻转二叉树</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 迭代</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root <span class="keyword">return</span> </span><br><span class="line">		root.left, root.right = root.right, root.left</span><br><span class="line">		self.leetcode(root.left)</span><br><span class="line">		self.leetcode(root.right)</span><br><span class="line">		<span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非迭代</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		stack = [root]</span><br><span class="line">		<span class="keyword">while</span> stack:</span><br><span class="line">			temp = stack.pop()</span><br><span class="line">			temp.left, temp.right = temp.right, temp.left</span><br><span class="line">			<span class="keyword">if</span> temp.right: stack.append(temp.right)</span><br><span class="line">			<span class="keyword">if</span> temp.left: stack.append(temp.left)</span><br><span class="line">		<span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<h4 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112 * 路径总和"></a>112 * 路径总和</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 迭代</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root, targetSum)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right: <span class="keyword">return</span> targetSum == root.val</span><br><span class="line">		<span class="keyword">return</span> self.leetcode(root.left, targetSum-root.val) <span class="keyword">or</span> self.leetcode(root.right, targetSum-root.val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 队列/栈</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root, targetSum)</span>:</span></span><br><span class="line">		stack = [[root, <span class="number">0</span>]]</span><br><span class="line">		<span class="keyword">while</span> stack: </span><br><span class="line">			temp, res = stack.pop(<span class="number">-1</span>)</span><br><span class="line">			res += temp.val</span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> temp.left <span class="keyword">and</span> <span class="keyword">not</span> temp.right <span class="keyword">and</span> targetSum == res: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">			<span class="keyword">if</span> temp.left: stack.append([temp.left, res])</span><br><span class="line">			<span class="keyword">if</span> temp.right: stack.append([temp.right, res])</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="700-二叉搜索树中的搜索"><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700 二叉搜索树中的搜索"></a>700 二叉搜索树中的搜索</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root, val)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">		<span class="keyword">if</span> root.val == val: <span class="keyword">return</span> root</span><br><span class="line">		<span class="keyword">elif</span> root.val &lt; val: <span class="keyword">return</span> self.leetcode(root.right, val)</span><br><span class="line">		<span class="keyword">else</span>: <span class="keyword">return</span> self.leetcode(root.left, val)</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 迭代</span></span><br><span class="line">Class Solution:</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root, val)</span>:</span></span><br><span class="line">		stack = [root]</span><br><span class="line">		<span class="keyword">while</span> stack: </span><br><span class="line">			temp = stack.pop()</span><br><span class="line">			<span class="keyword">if</span> temp.val == val: <span class="keyword">return</span> temp</span><br><span class="line">			<span class="keyword">if</span> temp.left <span class="keyword">and</span> temp.val &gt; val: stack.append(temp.left)</span><br><span class="line">			<span class="keyword">if</span> temp.right <span class="keyword">and</span> temp.val &lt; val: stack.append(temp.right)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">		</span><br><span class="line">	    <span class="keyword">while</span> root <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> root.val != val:</span><br><span class="line">            <span class="keyword">if</span> val &lt; root.val: root = root.left</span><br><span class="line">            <span class="keyword">else</span>: root = root.right</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<h4 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701 二叉搜索树中的插入操作"></a>701 二叉搜索树中的插入操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line">Class Solution:</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root, val)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> TreeNode(val)</span><br><span class="line">		<span class="keyword">if</span> root.val &lt; val: root.right = self.leetcode(root.right, val)</span><br><span class="line">		<span class="keyword">if</span> root.val &gt; val: root.left = self.leetcode(root.left, val)</span><br><span class="line">		<span class="keyword">return</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代</span></span><br><span class="line">Class Solution:</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root, val)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> TreeNode(val)</span><br><span class="line">		cur, p = root, <span class="literal">None</span></span><br><span class="line">		<span class="keyword">while</span> cur:</span><br><span class="line">			p = cur</span><br><span class="line">			cur = cur.left <span class="keyword">if</span> cur.val &gt; val <span class="keyword">else</span> cur.right</span><br><span class="line">		<span class="keyword">if</span> p.val &lt; val: p.right = TreeNode(val)</span><br><span class="line">		<span class="keyword">if</span> p.val &gt; val: p.left = TreeNode(val)</span><br><span class="line">		<span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<h4 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98* 验证二叉搜索树"></a>98* 验证二叉搜索树</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1. 节点的左子树只包含小于当前节点的数</span></span><br><span class="line"><span class="string">2. 节点的右子树只包含大于当前节点的数</span></span><br><span class="line"><span class="string">3. 所有左子树和右子树自身必须也是二叉搜索树</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line">Class Solution:</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="function"><span class="keyword">def</span> <span class="title">Valid</span><span class="params">(root, min_val, max_val)</span>:</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">			<span class="keyword">if</span> root.val &lt;= min_val <span class="keyword">or</span> root.val &gt;= max_val: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">			<span class="keyword">return</span> Valid(root,left, min_val, root.val) <span class="keyword">and</span> Valid(root.right, root.val, max_val)</span><br><span class="line">		<span class="keyword">return</span> Valid(root, float(<span class="string">'-inf'</span>), float(<span class="string">'inf'</span>))</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 迭代</span></span><br><span class="line">Class Solution:</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, root)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">		stack, pre = [], float(<span class="string">'-inf'</span>)</span><br><span class="line">		<span class="keyword">while</span> root <span class="keyword">or</span> satck:</span><br><span class="line">			<span class="keyword">while</span> root:</span><br><span class="line">				stack.append(root)</span><br><span class="line">				root = root.left</span><br><span class="line">			temp = stack.pop()</span><br><span class="line">			<span class="keyword">if</span> temp.val &lt;= pre: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">			pre = temp.val</span><br><span class="line">			<span class="keyword">if</span> temp.right: root = temp.right</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="递归-回溯"><a href="#递归-回溯" class="headerlink" title="递归/回溯"></a>递归/回溯</h3><h4 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21 合并两个有序链表"></a>21 合并两个有序链表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">		temp = ListNode()</span><br><span class="line">		result = temp</span><br><span class="line">		<span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">			<span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">				temp.next = l1</span><br><span class="line">				l1 = l1.next</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				temp.next = l2</span><br><span class="line">				l2 = l2.next</span><br><span class="line">			temp = temp.next</span><br><span class="line">		<span class="keyword">if</span> l1 <span class="keyword">or</span> l2: temp.next = l1 <span class="keyword">or</span> l2</span><br><span class="line">		<span class="keyword">return</span> result.next</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> l1 <span class="keyword">or</span> l2: <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</span><br><span class="line">		<span class="keyword">if</span> l1.val &lt; l2.val: </span><br><span class="line">			l1.next = self.leetcode(l1.next, l2)</span><br><span class="line">			<span class="keyword">return</span> l1.next</span><br><span class="line">		<span class="keyword">else</span>: </span><br><span class="line">			l2.next = self.leetcode(l1, l2.next)</span><br><span class="line">			<span class="keyword">return</span> l2.next</span><br></pre></td></tr></table></figure>
<h4 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206 反转链表"></a>206 反转链表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 双指针</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">		pre, cur = <span class="literal">None</span>, head</span><br><span class="line">		<span class="keyword">while</span> cur:</span><br><span class="line">			next = cur.next</span><br><span class="line">			cur.next = pre</span><br><span class="line">			pre = cur</span><br><span class="line">			cur = next</span><br><span class="line">		<span class="keyword">return</span> pre</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">		h, stack = head, []</span><br><span class="line">		<span class="keyword">while</span> h:</span><br><span class="line">			stack.append(h)</span><br><span class="line">			h = h.next</span><br><span class="line">		temp = ListNode()</span><br><span class="line">		result = temp</span><br><span class="line">		<span class="keyword">while</span> stack:</span><br><span class="line">			node = stack.pop()</span><br><span class="line">			node.next = <span class="literal">None</span></span><br><span class="line">			temp.next = node</span><br><span class="line">			temp = temp.next</span><br><span class="line">		<span class="keyword">return</span> result.next</span><br></pre></td></tr></table></figure>
<h4 id="两个递增链表合并为一个递减链表"><a href="#两个递增链表合并为一个递减链表" class="headerlink" title="两个递增链表合并为一个递减链表"></a>两个递增链表合并为一个递减链表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, l1, l2)</span>:</span></span><br></pre></td></tr></table></figure>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="350-两个数组的交集（可以不考虑输出结果）"><a href="#350-两个数组的交集（可以不考虑输出结果）" class="headerlink" title="350 两个数组的交集（可以不考虑输出结果）"></a>350 两个数组的交集（可以不考虑输出结果）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, nums1, nums2)</span>:</span></span><br><span class="line">		nums1.sort()</span><br><span class="line">		nums2.sort()</span><br><span class="line">		s1, s2, e1, e2 = <span class="number">0</span>, <span class="number">0</span>, len(nums1), len(nums2)</span><br><span class="line">		res = []</span><br><span class="line">		<span class="keyword">while</span> s1 &lt; e1 <span class="keyword">and</span> s2 &lt; e2:</span><br><span class="line">			<span class="keyword">if</span> nums1[s1] &lt; nums2[s2]: s1 += <span class="number">1</span></span><br><span class="line">			<span class="keyword">elif</span> nums1[s1] &gt; nums2[s2]: s2 += <span class="number">1</span></span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				res.append(nums1[s1])</span><br><span class="line">				s1 += <span class="number">1</span></span><br><span class="line">				s2 += <span class="number">1</span></span><br><span class="line">		<span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h4 id="有效数独"><a href="#有效数独" class="headerlink" title="有效数独"></a>有效数独</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, board)</span>:</span></span><br><span class="line">		row, col, sqart = defaultdict(set), defaultdict(set), defaultdict(set)</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">9</span>):</span><br><span class="line">				temp = board[i][j]</span><br><span class="line">				<span class="keyword">if</span> temp == <span class="string">"."</span>: <span class="keyword">continue</span></span><br><span class="line">				n = i//<span class="number">3</span>*<span class="number">3</span> + j//<span class="number">3</span></span><br><span class="line">				<span class="keyword">if</span> temp <span class="keyword">in</span> row[i] <span class="keyword">or</span> temp <span class="keyword">in</span> col[j] <span class="keyword">or</span> temp <span class="keyword">in</span> sqart[n]: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">				row[i].add(temp)</span><br><span class="line">				col[j].add(temp)</span><br><span class="line">				sqart[n].add(temp)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387 字符串中的第一个唯一字符"></a>387 字符串中的第一个唯一字符</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, s)</span>:</span></span><br><span class="line">		d, n = &#123;&#125;, len(s)</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">			<span class="keyword">if</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> d: d[s[i]] = i</span><br><span class="line">			<span class="keyword">else</span>: d[s[i]] = n + <span class="number">1</span></span><br><span class="line">		res = min(d.values())</span><br><span class="line">		<span class="keyword">if</span> res &lt; n: <span class="keyword">return</span> res</span><br><span class="line">		<span class="keyword">else</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141 环形链表"></a>141 环形链表</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> head.next: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">		fast = slow = head</span><br><span class="line">		<span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">			fast = fast.next.next</span><br><span class="line">			slow = slow.next</span><br><span class="line">			<span class="keyword">if</span> fast == slow: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h4 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203 移除链表元素"></a>203 移除链表元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, head, val)</span>:</span></span><br><span class="line">		<span class="keyword">while</span> head <span class="keyword">and</span> head.val == val: head = head.next</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span></span><br><span class="line">		result = head</span><br><span class="line">		<span class="keyword">while</span> head.next:</span><br><span class="line">			<span class="keyword">if</span> head.next.val == val: head.next = head.next.next</span><br><span class="line">			<span class="keyword">else</span>: head = head.next</span><br><span class="line">		<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<h4 id="83-删除排序链表中的重复元素"><a href="#83-删除排序链表中的重复元素" class="headerlink" title="83 删除排序链表中的重复元素"></a>83 删除排序链表中的重复元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单指针</span></span><br><span class="line">Class Solution:</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> </span><br><span class="line">		result = head</span><br><span class="line">		<span class="keyword">while</span> head.next:</span><br><span class="line">			<span class="keyword">if</span> head.val == head.next.val: head = head.next.next</span><br><span class="line">			<span class="keyword">else</span>: head = head.next</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line">		</span><br><span class="line"><span class="comment"># 双指针</span></span><br><span class="line">Class Solution：</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, head)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span></span><br><span class="line">		cur, next = head, head.next</span><br><span class="line">		<span class="keyword">while</span> next:</span><br><span class="line">			<span class="keyword">if</span> cur.val == next.val: cur.next = next.next</span><br><span class="line">			<span class="keyword">else</span>: cur = next</span><br><span class="line">			next = next.next</span><br><span class="line">		<span class="keyword">return</span> head</span><br></pre></td></tr></table></figure>
<h3 id="组合总和Ⅰ-Ⅳ"><a href="#组合总和Ⅰ-Ⅳ" class="headerlink" title="组合总和Ⅰ ~ Ⅳ"></a>组合总和Ⅰ ~ Ⅳ</h3><h4 id="leetcode39"><a href="#leetcode39" class="headerlink" title="leetcode39"></a>leetcode39</h4><p>题目描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个无重复元素的数组candidates和一个目标数target，找出candidates中所有可以使数字和为target的组合。candidates中的数字可以无限制重复被选取。</span><br><span class="line">说明：</span><br><span class="line">所有数字（包括target）都是正整数。</span><br><span class="line">解集不能包含重复的组合。</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：candidates &#x3D; [2, 7, 6, 3], target &#x3D; 7,</span><br><span class="line">输出：[[7], [2, 2, 3]]</span><br></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span><span class="params">(self, candidates, target)</span>:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> candidates:  <span class="comment">#先解决空输入的情况</span></span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        candidates.sort()  <span class="comment">#排序</span></span><br><span class="line">		n = len(candidates)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(i, temp_sum, temp_list)</span>:</span> </span><br><span class="line">            <span class="string">"""</span></span><br><span class="line"><span class="string">            i：遍历到candidates数组中第几个元素</span></span><br><span class="line"><span class="string">            temp_sum：目前遍历数组的和</span></span><br><span class="line"><span class="string">            temp_list：目前遍历的数组</span></span><br><span class="line"><span class="string">            """</span></span><br><span class="line">            <span class="keyword">if</span> temp_sum == target:</span><br><span class="line">                res.append(temp_list)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> temp_sum &gt; target: <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</span><br><span class="line">                backtrack(j, temp_sum+candidates[j], temp_list+[candidates[j]])</span><br><span class="line">        backtrack(<span class="number">0</span>, <span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p>
<h4 id="leetcode40"><a href="#leetcode40" class="headerlink" title="leetcode40"></a>leetcode40</h4><p>题目描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定一个数组candidates和一个目标数 target，找出candidates中所有可以使数字和为target的组合。candidates中的每个数字在每个组合中只能使用一次。</span><br><span class="line">说明：</span><br><span class="line">所有数字（包括target）都是正整数。</span><br><span class="line">解集不能包含重复的组合。</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：candidates &#x3D; [10, 1, 2, 7, 6, 1, 5], target &#x3D; 8,\</span><br><span class="line">输出：[[1, 7], [1, 2, 5], [2, 6], [1, 1, 6]]</span><br></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span><span class="params">(self, candidates, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> candidates: <span class="keyword">return</span> []</span><br><span class="line">        candidates.sort()</span><br><span class="line">		n = len(candidates)</span><br><span class="line">		res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(i, temp_sum, temp_list)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> temp_sum == target:</span><br><span class="line">                res.append(temp_list)</span><br><span class="line">                <span class="keyword">return</span>        </span><br><span class="line">            <span class="keyword">if</span> temp_sum &gt; target <span class="keyword">or</span> i == n: <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i,n):</span><br><span class="line">                <span class="keyword">if</span> j &gt; i <span class="keyword">and</span> candidates[j] == candidates[j<span class="number">-1</span>]:  <span class="comment">#主要是为了防止出现重复的解</span></span><br><span class="line">                    <span class="keyword">continue</span>            </span><br><span class="line">                backtrack(j+<span class="number">1</span>, temp_sum+candidates[j], temp_list+[candidates[j]])</span><br><span class="line">        backtrack(<span class="number">0</span>, <span class="number">0</span>, [])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p>
<h4 id="leetcode216"><a href="#leetcode216" class="headerlink" title="leetcode216"></a>leetcode216</h4><p>题目描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">找出所有相加之和为n的k个数的组合。组合中只允许含有1 - 9的正整数，并且每种组合中不存在重复的数字。</span><br><span class="line">说明：</span><br><span class="line">所有数字都是正整数。</span><br><span class="line">解集不能包含重复的组合。</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：k &#x3D; 3, n &#x3D; 7</span><br><span class="line">输出：[[1,2,4]]</span><br></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def combinationSum3(self, k, n):</span><br><span class="line">        candidates &#x3D; list(range(1,10))</span><br><span class="line">        res &#x3D; []</span><br><span class="line">        def backtrack(i, temp_sum, temp_list):</span><br><span class="line">            if temp_sum&#x3D;&#x3D;n and len(temp_list)&#x3D;&#x3D;k:</span><br><span class="line">                res.append(temp_list)</span><br><span class="line">                return</span><br><span class="line">            if len(temp_list)&#x3D;&#x3D;k: return</span><br><span class="line">            for j in range(i, len(candidates)):</span><br><span class="line">                backtrack(j+1, temp_sum+candidates[j], temp_list+[candidates[j]])</span><br><span class="line">        backtrack(0,0,[])</span><br><span class="line">        return res</span><br></pre></td></tr></table></figure></p>
<h4 id="leetcode377"><a href="#leetcode377" class="headerlink" title="leetcode377"></a>leetcode377</h4><p>题目描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给你一个由不同整数组成的数组nums，和一个目标整数target。请从nums中找出并返回总和为target的元素组合的个数。</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1,2,3], target &#x3D; 4</span><br><span class="line">输出：7</span><br><span class="line">解释：</span><br><span class="line">所有可能的组合为：</span><br><span class="line">(1, 1, 1, 1)</span><br><span class="line">(1, 1, 2)</span><br><span class="line">(1, 2, 1)</span><br><span class="line">(1, 3)</span><br><span class="line">(2, 1, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(3, 1)</span><br><span class="line">请注意，顺序不同的序列被视作不同的组合。</span><br></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 只能选择某一天买入股票，并选择在未来的某一个不同的日子卖出该股票</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">leetcode</span><span class="params">(self, prices)</span>:</span></span><br><span class="line">		n, Min = len(prices), prices[<span class="number">0</span>]</span><br><span class="line">		dp = [<span class="number">0</span>]*n</span><br><span class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">			Min = min(Min, prices[i])</span><br><span class="line">			dp[i] = prices[i] - Min</span><br><span class="line">		<span class="keyword">return</span> max(dp)</span><br></pre></td></tr></table></figure>
<h4 id="接水滴-leetcode42"><a href="#接水滴-leetcode42" class="headerlink" title="接水滴 leetcode42"></a>接水滴 leetcode42</h4><p>题目描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：height &#x3D; [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]</span><br><span class="line">输出：6</span><br><span class="line">解释：上面是由数组 [0,1,0,2,1,0,表示的高度图。</span><br></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 粗暴解法：一层一层数 </span><br><span class="line">class Solution:</span><br><span class="line">	def Water(self, n, height):</span><br><span class="line">		l, r &#x3D; [], []</span><br><span class="line">		l[0], r[0], ans &#x3D; height[0], height[-1], 0</span><br><span class="line">		for i in range(1, n):</span><br><span class="line">			if height[i] &gt;&#x3D; height[i-1]: l.append(height[i])</span><br><span class="line">			else: l.append(l[-1])</span><br><span class="line">		for i in range(n-1, 0, -1):</span><br><span class="line">			if height[i] &gt;&#x3D; height[i+1]: r.append(height[i])</span><br><span class="line">			else: r.append(r[-1])</span><br><span class="line">		for i in range(n):</span><br><span class="line">			if l[i] &gt;&#x3D; r[n-1-i]: ans +&#x3D; l[i]</span><br><span class="line">			else: ans +&#x3D; r[n-1-i]</span><br><span class="line">		return ans - sum(height)</span><br></pre></td></tr></table></figure></p>
<h2 id="面试专用"><a href="#面试专用" class="headerlink" title="面试专用"></a>面试专用</h2><h3 id="1480-一维数组的动态和"><a href="#1480-一维数组的动态和" class="headerlink" title="1480 一维数组的动态和"></a>1480 一维数组的动态和</h3><p>题目描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给你一个数组nums。数组动态和的计算公式为：runningSum[i] &#x3D; sum(num[0]...num[i])</span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1, 2, 3, 4]</span><br><span class="line">输出：[1, 3, 6, 10]</span><br></pre></td></tr></table></figure></p>
<h3 id="724-寻找数组的中心下标"><a href="#724-寻找数组的中心下标" class="headerlink" title="724 寻找数组的中心下标"></a>724 寻找数组的中心下标</h3><p>题目描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给你一个整数数组nums，请计算数组的中心下标。</span><br><span class="line"></span><br><span class="line">数组中心下标是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</span><br><span class="line"></span><br><span class="line">如果中心下标位于数组最左端，那么左侧数之和视为0，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</span><br><span class="line"></span><br><span class="line">如果数组有多个中心下标，应该返回最靠近左边的那一个。如果数组不存在中心下标，返回-1。</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums &#x3D; [1, 7, 3, 6, 5, 6]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure></p>
<p>代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class Solution:</span><br><span class="line">	def leetcode(self, nums):</span><br><span class="line">		N, S, preS &#x3D; len(nums), sum(nums), 0</span><br><span class="line">		for i in range(N):</span><br><span class="line">			if preS &#x3D;&#x3D; S - preS - nums[i]: return i</span><br><span class="line">			preS +&#x3D; nums[i]</span><br><span class="line">		return -1</span><br></pre></td></tr></table></figure></p>
<h3 id="同构字符串"><a href="#同构字符串" class="headerlink" title="同构字符串"></a>同构字符串</h3><p>题目描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定两个字符串s和t，判断是否同构</span><br></pre></td></tr></table></figure></p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;egg&quot;, t &#x3D; &quot;add&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><br>代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 字符串index</span><br><span class="line">Class Solution:</span><br><span class="line">	def leetcode(self, s, t):</span><br><span class="line">		for i in range(len(s)):</span><br><span class="line">			if s.index(s[i]) !&#x3D; t.index(t[i]): return False</span><br><span class="line">		return True</span><br><span class="line"></span><br><span class="line"># hash	</span><br><span class="line">Class Solution：</span><br><span class="line">	def leetcode(self, s, t):</span><br><span class="line">	ds, dt &#x3D; &#123;&#125;, &#123;&#125;</span><br><span class="line">		for i in len(s):</span><br><span class="line">			if (s[i] in ds and ds[s[i]] !&#x3D; t[i]) or (t[i] in dt and dt[t[i]] !&#x3D; s[i]): return False</span><br><span class="line">			ds[s[i]], dt[t[i]] &#x3D; t[i], s[i]</span><br><span class="line">		return True</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 美团</span><br><span class="line"></span><br><span class="line">### 1</span><br><span class="line">题目描述：</span><br></pre></td></tr></table></figure><br>选出尽可能大的子集，且不存在任何两数之差 ≤ 1<br>1 2 3 5 6 7 -&gt; 1 3 5 7<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2</span><br><span class="line">题目描述：</span><br></pre></td></tr></table></figure><br>在一个立方体豆腐中，切出最大体积的块<br>第一行（n: 边长；m: 切割次数）<br>第二行（切割方向：xyz）<br>第三行（切割距离：以右上角为基准）<br>2 3<br>x y z<br>1 1 1<br>-&gt;<br>4<br>2<br>1<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3</span><br><span class="line">题目描述：</span><br></pre></td></tr></table></figure><br>和最大的子数组<br>允许翻转连续的一段<br>6<br>-1 3 -5 2 -1 3<br>-&gt;<br>7<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 4</span><br><span class="line">题目描述：</span><br></pre></td></tr></table></figure><br>允许改变一次数据分布<br>输出最大的和<br>第一行（n：数组长度；m: 操作次数）<br>第二行（数组 nums）<br>第三行（两种操作：求和（11r） 加k（2lrk））<br>5 5<br>3 4 2 1 5<br>1 1 3<br>2 3 4 2<br>1 2 4<br>2 2 3 2<br>1 3 5<br>-&gt;<br>42<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 完美世界</span><br><span class="line"></span><br><span class="line">### 1</span><br><span class="line">题目描述；</span><br></pre></td></tr></table></figure><br>softmax偏导<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2</span><br><span class="line">题目描述：</span><br></pre></td></tr></table></figure><br>leetcode 835<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 3</span><br><span class="line">题目描述：</span><br></pre></td></tr></table></figure><br>最大连通域<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 4</span><br><span class="line">题目描述：</span><br></pre></td></tr></table></figure><br>IOU<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 字节</span><br><span class="line"></span><br><span class="line">### 1</span><br></pre></td></tr></table></figure><br>规定时间内，最多能完成多少任务，任务连续<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2</span><br></pre></td></tr></table></figure><br>扑克牌，1~13 * 4，每人4张，已知3张的大小，求A赢B的概率<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3</span><br></pre></td></tr></table></figure><br>座位连续，自由移动，移动的最小距离<br>min(abs(y-x), m-abs(y-x)<br>3 5<br>1 3 5 -&gt; 1<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 4</span><br></pre></td></tr></table></figure><br>水滴<br>```</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
  </entry>
</search>
